# 
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-08 17:50+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sdk/actions-guide.en.rst:2
msgid "Actions Guide"
msgstr ""

#: ../../sdk/actions-guide.en.rst:28
msgid "Actions"
msgstr ""

#: ../../sdk/actions-guide.en.rst:30
msgid ""
"An **action** is a handle to an operation initiated by a plugin that has not"
" yet completed. For example: when a plugin connects to a remote server, it "
"uses the call ``TSNetConnect`` - which takes ``TSCont`` as an argument to "
"call back when the connection is established. ``TSNetConnect`` might not "
"call the continuation back immediately and will return an ``TSAction`` "
"structure that the caller can use to cancel the operation. Cancelling the "
"operation does not necessarily mean that the operation will not occur; it "
"simply means that the continuation passed into the operation will not be "
"called back. In such an example, the connection might still occur if the "
"action is cancelled; however, the continuation that initiated the connection"
" would not be called back."
msgstr ""

#: ../../sdk/actions-guide.en.rst:42
msgid ""
"In the preceding example, it is also possible that the connection will "
"complete and call back the continuation before ``TSNetConnect`` returns. If "
"that occurs, then ``TSNetConnect`` returns a special action that causes "
"``TSActionDone`` to return ``1``. This specifies that the operation has "
"already completed, so it's pointless to try to cancel the operation. Also "
"note that an action will never change from non-completed to completed. When "
"the operation actually succeeds and the continuation is called back, the "
"continuation must zero out its action pointer to indicate to itself that the"
" operation succeeded."
msgstr ""

#: ../../sdk/actions-guide.en.rst:52
msgid ""
"The asynchronous nature of all operations in Traffic Server necessitates "
"actions. You should notice from the above discussion that once a call to a "
"function like ``TSNetConnect`` is made by a continuation and that function "
"returns a valid action (``TSActionDone`` returns ``0``), it is not safe for "
"the continuation to do anything else except return from its handler "
"function. It is not safe to modify or examine the continuation's data "
"because the continuation may have already been destroyed."
msgstr ""

#: ../../sdk/actions-guide.en.rst:60
msgid "Below is an example of typical usage for an action:"
msgstr ""

#: ../../sdk/actions-guide.en.rst:104
msgid ""
"The example above shows a simple plugin that creates a continuation and then"
" schedules it to be called immediately. When the plugin's handler function "
"is called the first time, the event is ``TS_EVENT_IMMEDIATE``. The plugin "
"then tries to open a net connection to port 9999 on ``localhost`` "
"(127.0.0.1). The IP description was left in cider notation to further "
"clarify what is going on; also note that the above won't actually compile "
"until the IP address is modified. The action returned from ``TSNetConnect`` "
"is examined by the plugin. If the operation has not completed, then the "
"plugin stores the action in its continuation. Otherwise, the plugin knows it"
" has already been called back and there is no reason to store the action "
"pointer."
msgstr ""

#: ../../sdk/actions-guide.en.rst:116
msgid ""
"A final question might be, \"why would a plugin want to cancel an action?\" "
"In the above example, a valid reason could be to place a limit on the length"
" of time it takes to open a connection. The plugin could schedule itself to "
"get called back in 30 seconds and then initiate the net connection. If the "
"timeout expires first, then the plugin would cancel the action. The "
"following sample code implements this:"
msgstr ""

#: ../../sdk/actions-guide.en.rst:176
msgid "The action functions are:"
msgstr ""

#: ../../sdk/actions-guide.en.rst:178
msgid ""
"```TSActionCancel`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a5d49a6addcc9dbdc7f339ee6b73ac0b6>`__"
msgstr ""

#: ../../sdk/actions-guide.en.rst:179
msgid ""
"```TSActionDone`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#abe189274ad59911f2a57d345d11bfecb>`__"
msgstr ""

#: ../../sdk/actions-guide/hosts-lookup-api.en.rst:2
msgid "Hosts Lookup API"
msgstr ""

#: ../../sdk/actions-guide/hosts-lookup-api.en.rst:21
msgid ""
"The hosts lookup enables plugins to ask Traffic Server to do a host lookup "
"of a host name, much like a DNS lookup."
msgstr ""

#: ../../sdk/actions-guide/hosts-lookup-api.en.rst:24
msgid "The hosts lookup functions are as follows:"
msgstr ""

#: ../../sdk/actions-guide/hosts-lookup-api.en.rst:26
msgid ""
"```TSHostLookup`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ab5bf6eea0ed883e5dc69253965935d12>`__"
msgstr ""

#: ../../sdk/actions-guide/hosts-lookup-api.en.rst:27
msgid ""
"```TSHostLookupResultAddrGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aecac0767192746af1867f528e01d167b>`__"
msgstr ""

#: ../../sdk/adding-statistics.en.rst:2
msgid "Adding Statistics"
msgstr ""

#: ../../sdk/adding-statistics.en.rst:21
msgid ""
"This chapter describes how to add statistics to your plugins. Statistics can"
" be coupled or uncoupled; **coupled** statistics are quantities that are "
"related and must therefore be updated together. The Traffic Server API "
"statistics functions add your plugin's statistics to the Traffic Server "
"statistics system. You can view your plugin statistics as you would any "
"other Traffic Server statistic, using Traffic Line (Traffic Server's command"
" line interface). This chapter contains the following topics:"
msgstr ""

#: ../../sdk/adding-statistics.en.rst:38
msgid "Uncoupled Statistics"
msgstr ""

#: ../../sdk/adding-statistics.en.rst:40
msgid ""
"A statistic is an object of type ``TSStat``. The value of the statistic is "
"of type ``TSStatType``. The possible ``TSStatTypes`` are:"
msgstr ""

#: ../../sdk/adding-statistics.en.rst:43
msgid "``TSSTAT_TYPE_INT64``"
msgstr ""

#: ../../sdk/adding-statistics.en.rst:45
msgid "``TSSTAT_TYPE_FLOAT``"
msgstr ""

#: ../../sdk/adding-statistics.en.rst:47
msgid "There is *no* ``TSSTAT_TYPE_INT32``."
msgstr ""

#: ../../sdk/adding-statistics.en.rst:49
msgid "To add uncoupled statistics, follow the steps below:"
msgstr ""

#: ../../sdk/adding-statistics.en.rst:51
msgid ""
"Declare your statistic as a global variable in your plugin. For example:"
msgstr ""

#: ../../sdk/adding-statistics.en.rst:58
msgid ""
"In ``TSPluginInit``, create new statistics using ``TSStatCreate``. When you "
"create a new statistic, you need to give it an \"external\" name that the "
"Traffic Server command line interface (Traffic Line) uses to access the "
"statistic. For example:"
msgstr ""

#: ../../sdk/adding-statistics.en.rst:67
msgid ""
"Modify (increment, decrement, or other modification) your statistic in "
"plugin functions."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:2
msgid "Coupled Statistics"
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:21
msgid ""
"Use coupled statistics for quantities that are related and therefore must be"
" updated jointly."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:24
msgid ""
"As a very simple example, suppose you have three statistics: ``sum``, "
"``part_1``, and ``part_2``. They must always preserve the relationship that "
"``sum = part_1  + part_2``. If you update ``part_1`` without updating "
"``sum`` at the same time, then the equation becomes untrue. Therefore, the "
"statistics are said to be *coupled*."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:30
msgid ""
"The mechanism for updating coupled statistics jointly is to create local "
"copies of global coupled statistics in the routines that modifiy them. When "
"each local copy is updated appropriately, do a global update using "
"``TSStatsCoupledUpdate``. To specify which statistics are related to one "
"another, establish a coupled statistic category and make sure that each "
"coupled statistic belongs to the appropriate category. When it is time to do"
" the global update, specify the category to be updated."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:40
msgid ""
"The local statistic copy must have a duplicate set of statistics as that of "
"the master copy. Local statistics must also be added to the local statistic "
"category in the same order as their master copy counterparts were originally"
" added."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:45
msgid ""
"Below are the steps you need to follow, along with a code example taken from"
" the ``redirect-1.c`` sample plugin."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:49
msgid "To add coupled statistics:"
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:51
msgid ""
"Declare the global category for your coupled statistics as a global "
"``TSCoupledStat`` variable in your plugin."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:54
msgid ""
"Declare your coupled statistics as global ``TSStat`` variables in your "
"plugin."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:57
msgid ""
"In ``TSPluginInit``, create a new global coupled category using "
"``TSStatCoupledGlobalCategoryCreate``."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:60
msgid ""
"In ``TSPluginInit``, create new global coupled statistics using "
"``TSStatCoupledGlobalAdd``. When you create a new statistic, you need to "
"give it an \"external\" name that the Traffic Server command line interface "
"(Traffic Line) uses to access the statistic."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:65
msgid ""
"In any routine wherein you want to modify (increment, decrement, or other "
"modification) your coupled statistics, declare local copies of the coupled "
"category and coupled statistics."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:69
msgid ""
"Create local copies using ``TSStatCoupledLocalCopyCreate`` and "
"``TSStatCoupledLocalAdd``."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:72
msgid ""
"Modify the local copies of your statistics. Then call "
"``TSStatsCoupledUpdate`` to update the global copies jointly."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:75
msgid ""
"When you are finished, you must destroy all of the local copies in the "
"category via ``TSStatCoupledLocalCopyDestroy``."
msgstr ""

#: ../../sdk/adding-statistics/coupled-statistics.en.rst:79
msgid "Example Using the redirect-1.c Sample Plugin"
msgstr ""

#: ../../sdk/adding-statistics/viewing-statistics-using-traffic-line.en.rst:2
msgid "Viewing Statistics Using Traffic Line"
msgstr ""

#: ../../sdk/adding-statistics/viewing-statistics-using-traffic-line.en.rst:23
msgid "To view statistics for your plugin, follow the steps below:"
msgstr ""

#: ../../sdk/adding-statistics/viewing-statistics-using-traffic-line.en.rst:25
msgid ""
"Make sure you know the name of your statistic (i.e., the name used in the "
"``TSStatCoupledGlobalAdd``, ``TSStatCreate``, or "
"``TSStatCoupledGlobalCategoryCreate`` call)."
msgstr ""

#: ../../sdk/adding-statistics/viewing-statistics-using-traffic-line.en.rst:29
msgid "In your ``<Traffic Server>/bin`` directory, enter the following:"
msgstr ""

#: ../../sdk/adding-statistics/viewing-statistics-using-traffic-line.en.rst:31
msgid "::::text ./traffic\\_line -r the\\_name"
msgstr ""

#: ../../sdk/continuations.en.rst:2
msgid "Continuations"
msgstr ""

#: ../../sdk/continuations.en.rst:27
msgid ""
"The continuation interface is Traffic Server's basic callback mechanism. "
"**Continuations** are instances of the opaque data type ``TSCont``. In its "
"basic form, a continuation represents a handler function and a mutex."
msgstr ""

#: ../../sdk/continuations.en.rst:32 ../../sdk/plugin-management.en.rst:21
msgid "This chapter covers the following topics:"
msgstr ""

#: ../../sdk/continuations.en.rst:34
msgid "`Mutexes and Data <MutexesData>`__"
msgstr ""

#: ../../sdk/continuations.en.rst:36
msgid "`How to Activate Continuations <ActivateContinuations.html>`__"
msgstr ""

#: ../../sdk/continuations.en.rst:38
msgid "`Writing Handler Functions <WritingHandlerFunctions.html>`__"
msgstr ""

#: ../../sdk/continuations.en.rst:41
msgid "Mutexes and Data"
msgstr ""

#: ../../sdk/continuations.en.rst:43
msgid ""
"A continuation must be created with a mutex if your continuation does one of"
" the following:"
msgstr ""

#: ../../sdk/continuations.en.rst:46
msgid ""
"is registered globally (``TSHttpHookAdd`` or ``TSHttpSsnHookAdd``) to an "
"HTTP hook and uses ``TSContDataSet/Get``"
msgstr ""

#: ../../sdk/continuations.en.rst:49
msgid ""
"is registered locally (``TSHttpTxnHookAdd``), but for multiple transactions "
"uses ``TSContDataSet/Get``"
msgstr ""

#: ../../sdk/continuations.en.rst:52
msgid ""
"uses ``TSCacheXXX``, ``TSNetXXX``, ``TSHostLookup``, or ``TSContSchedule`` "
"APIs"
msgstr ""

#: ../../sdk/continuations.en.rst:55
msgid ""
"Before being activated, a caller must grab the continuation's mutex. This "
"requirement makes it possible for a continuation's handler function to "
"safely access its data and to prevent multiple callers from running it at "
"the same time (see the `sample Protocol plugin <../new-protocol-"
"plugins#AboutSampleProtocol>`__ for usage). The data protected by the mutex "
"is any global or continuation data associated to the continuation by "
"``TSContDataSet``. This does not include the local data created by the "
"continuation handler function. A typical example of continuations created "
"with associated data structures and mutexes is the transaction state machine"
" created in the sample Protocol plugin (see `One Way to Implement a "
"Transaction State Machine <../new-protocol-"
"plugins#OneWayImplementaTransactionStateMachine>`__)."
msgstr ""

#: ../../sdk/continuations.en.rst:68
msgid ""
"A reentrant call occurs when the continuation passed as an argument to the "
"API can be called in the same stack trace as the function calling the API. "
"For example, if you call ``TSCacheRead`` (``contp, mykey``), it is possible "
"that ``contp``'s handler will be called directly and then ``TSCacheRead`` "
"returns."
msgstr ""

#: ../../sdk/continuations.en.rst:74
msgid "Caveats that could cause issues include the following:"
msgstr ""

#: ../../sdk/continuations.en.rst:76
msgid "a continuation has data associated with it (``TSContDataGet``)."
msgstr ""

#: ../../sdk/continuations.en.rst:78
msgid "\\*"
msgstr ""

#: ../../sdk/continuations.en.rst:79
msgid "the reentrant call passes itself as a continuation to the reentrant"
msgstr ""

#: ../../sdk/continuations.en.rst:80
msgid ""
"API. In this case, the continuation should not try to access its data after "
"calling the reentrant API. The reason for this is that data may be modified "
"by the section of code in the continuation's handler that handles the event "
"sent by the API. It is recommended that you always return after a reentrant "
"call to avoid accessing something that has been deallocated."
msgstr ""

#: ../../sdk/continuations.en.rst:87
msgid "Below is an example, followed by an explanation."
msgstr ""

#: ../../sdk/continuations.en.rst:104
msgid ""
"The above example first assumes that the continuation is called back with "
"``event1``; it then does the first reentrant call that schedules the "
"continuation to receive ``event2``. Because the call is reentrant, the "
"processor calls back the continuation right away with ``event2`` and the "
"continuation is destroyed. If you try to access the continuation or one of "
"its members after the reentrant call, then you might access something that "
"has been deallocated. To avoid accessing something that has been "
"deallocated, never access the continuation or any of its members after a "
"reentrant call - just exit the handler."
msgstr ""

#: ../../sdk/continuations.en.rst:114
msgid ""
"**Note:** Most HTTP transaction plugin continuations do not need non-null "
"mutexes because they're called within the processing of an HTTP transaction,"
" and therefore have the transaction's mutex."
msgstr ""

#: ../../sdk/continuations.en.rst:118
msgid ""
"It is also possible to specify a continuation's mutex as ``NULL``. This "
"should be done only when registering a continuation to a global hook, by a "
"call to ``TSHttpHookAdd``. In this case, the continuation can be called "
"simultaneously by different instances of HTTP SM running on different "
"threads. Having a mutex here would slow and/or hinder Traffic Server "
"performance, since all the threads will try to lock the same mutex. The "
"drawback of not having a mutex is that such a continuation cannot have data "
"associated with it (i.e., ``TSContDataGet/Set`` cannot be used)."
msgstr ""

#: ../../sdk/continuations.en.rst:128
msgid ""
"When using a ``NULL`` mutex it is dangerous to access the continuation's "
"data, but usually continuations with ``NULL`` mutexes have no data "
"associated with them anyway. An example of such a continuation is one that "
"gets called back every time an HTTP request is read, and then determines "
"from the request alone if the request should go through or be rejected. An "
"HTTP transaction gives its continuation data to the ``contp``."
msgstr ""

#: ../../sdk/continuations/how-to-activate-continuations.en.rst:2
msgid "How to Activate Continuations"
msgstr ""

#: ../../sdk/continuations/how-to-activate-continuations.en.rst:21
msgid ""
"Continuations are activated when they receive an event or by "
"``TSContSchedule`` (which schedules a continuation to receive an event). "
"Continuations might receive an event because:"
msgstr ""

#: ../../sdk/continuations/how-to-activate-continuations.en.rst:25
msgid "Your plugin calls ``TSContCall``"
msgstr ""

#: ../../sdk/continuations/how-to-activate-continuations.en.rst:27
msgid ""
"The Traffic Server HTTP state machine sends an event corresponding to a "
"particular HTTP hook"
msgstr ""

#: ../../sdk/continuations/how-to-activate-continuations.en.rst:30
msgid ""
"A Traffic Server IO processor (such as a cache processor or net processor) "
"is letting a continuation know there is data (cache or network) available to"
" read or write. These callbacks are a result of using functions such "
"``TSVConnRead``/``Write`` or ``TSCacheRead``/``Write``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:2
msgid "Writing Handler Functions"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:21
msgid ""
"The handler function is the key component of a continuation. It is supposed "
"to examine the event and event data, and then do something appropriate. The "
"probable action might be to schedule another event for the continuation to "
"received, to open up a connection to a server, or simply to destroy itself."
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:27
msgid ""
"The continuation's handler function is a function of type ``TSEventFunc``. "
"Its arguments are a continuation, an event, and a pointer to some data (this"
" data is passed to the continuation by the caller - do not confuse this data"
" with the continuation's own data, associated by ``TSContDataSet``). When "
"the continuation is called back, the continuation and an event are passed to"
" the handler function. The continuation is a handle to the same continuation"
" that is invoked. The handler function typically has a switch statement to "
"handle the events it receives:"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:59
msgid ""
"You might notice that a continuation cannot determine if more events are "
"\"in flight\" toward it. Do not use ``TSContDestroy`` to delete a "
"continuation before you make sure that all incoming events, such as those "
"sent because of ``TSHttpTxnHookAdd``, have been handled."
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:64
msgid ""
"The following table lists events and the corresponding type of ``void* "
"data`` passed to handler functions:"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:68
msgid "Event"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:68
msgid "Event Sender"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:68
msgid "Data Type"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:70
msgid "``TS_EVENT_HTTP_READ_REQUEST_HDR``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:70
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:101
msgid "``TS_HTTP_READ_REQUEST_HDR_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:70
#: ../../sdk/continuations/writing-handler-functions.en.rst:71
#: ../../sdk/continuations/writing-handler-functions.en.rst:72
#: ../../sdk/continuations/writing-handler-functions.en.rst:73
#: ../../sdk/continuations/writing-handler-functions.en.rst:74
#: ../../sdk/continuations/writing-handler-functions.en.rst:75
#: ../../sdk/continuations/writing-handler-functions.en.rst:76
#: ../../sdk/continuations/writing-handler-functions.en.rst:77
#: ../../sdk/continuations/writing-handler-functions.en.rst:78
#: ../../sdk/continuations/writing-handler-functions.en.rst:82
msgid "``TSHttpTxn``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:71
msgid "``TS_EVENT_HTTP_OS_DNS``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:71
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:81
msgid "``TS_HTTP_OS_DNS_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:72
msgid "``TS_EVENT_HTTP_SEND_REQUEST_HDR``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:72
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:128
msgid "``TS_HTTP_SEND_REQUEST_HDR_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:73
msgid "``TS_EVENT_HTTP_READ_CACHE_HDR``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:73
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:87
msgid "``TS_HTTP_READ_CACHE_HDR_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:74
msgid "``TS_EVENT_HTTP_READ_RESPONSE_HDR``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:74
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:92
msgid "``TS_HTTP_READ_RESPONSE_HDR_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:75
msgid "``TS_EVENT_HTTP_SEND_RESPONSE_HDR``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:75
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:121
msgid "``TS_HTTP_SEND_RESPONSE_HDR_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:76
msgid "``TS_EVENT_HTTP_SELECT_ALT``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:76
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:115
msgid "``TS_HTTP_SELECT_ALT_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:77
msgid "``TS_EVENT_HTTP_TXN_START``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:77
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:146
msgid "``TS_HTTP_TXN_START_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:78
msgid "``TS_EVENT_HTTP_TXN_CLOSE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:78
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:140
msgid "``TS_HTTP_TXN_CLOSE_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:79
msgid "``TS_EVENT_HTTP_SSN_START``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:79
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:137
msgid "``TS_HTTP_SSN_START_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:79
#: ../../sdk/continuations/writing-handler-functions.en.rst:80
msgid "``TSHttpSsn``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:80
msgid "``TS_EVENT_HTTP_SSN_CLOSE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:80
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:132
msgid "``TS_HTTP_SSN_CLOSE_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:81
msgid "``TS_EVENT_NONE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:82
msgid "``TS_EVENT_CACHE_LOOKUP_COMPLETE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:82
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:74
msgid "``TS_HTTP_CACHE_LOOKUP_COMPLETE_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:83
#: ../../sdk/continuations/writing-handler-functions.en.rst:86
#: ../../sdk/continuations/writing-handler-functions.en.rst:87
msgid "``TS_EVENT_IMMEDIATE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:83
msgid "``TSVConnClose`` ``TSVIOReenable`` ``TSContSchedule``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:86
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:111
#: ../../sdk/io-guide/transformations.en.rst:116
msgid "``TS_HTTP_REQUEST_TRANSFORM_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:87
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:97
#: ../../sdk/io-guide/transformations.en.rst:118
msgid "``TS_HTTP_RESPONSE_TRANSFORM_HOOK``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:88
msgid "``TS_EVENT_CACHE_OPEN_READ``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:88
#: ../../sdk/continuations/writing-handler-functions.en.rst:89
msgid "``TSCacheRead``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:88
#: ../../sdk/continuations/writing-handler-functions.en.rst:90
msgid "Cache VC"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:89
msgid "``TS_EVENT_CACHE_OPEN_READ_FAILED``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:89
#: ../../sdk/continuations/writing-handler-functions.en.rst:91
#: ../../sdk/continuations/writing-handler-functions.en.rst:93
msgid "TS_CACHE_ERROR code"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:90
msgid "``TS_EVENT_CACHE_OPEN_WRITE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:90
#: ../../sdk/continuations/writing-handler-functions.en.rst:91
msgid "``TSCacheWrite``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:91
msgid "``TS_EVENT_CACHE_OPEN_WRITE_FAILED``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:92
msgid "``TS_EVENT_CACHE_REMOVE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:92
#: ../../sdk/continuations/writing-handler-functions.en.rst:93
msgid "``TSCacheRemove``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:93
msgid "``TS_EVENT_CACHE_REMOVE_FAILED``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:94
msgid "``TS_EVENT_NET_ACCEPT``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:94
#: ../../sdk/continuations/writing-handler-functions.en.rst:97
msgid "``TSNetAccept`` ``TSHttpTxnServerIntercept`` ``TSHttpTxnIntercept``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:94
msgid "``NetVConnection``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:97
msgid "``TS_EVENT_NET_ACCEPT_FAILED``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:100
msgid "``TS_EVENT_HOST_LOOKUP``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:100
msgid "``TSHostLookup``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:100
msgid "``TSHostLookupResult``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:101
msgid "``TS_EVENT_TIMEOUT``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:101
#: ../../sdk/continuations/writing-handler-functions.en.rst:123
msgid "``TSContSchedule``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:102
#: ../../sdk/io-guide.en.rst:123
msgid "``TS_EVENT_ERROR``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:103
#: ../../sdk/io-guide.en.rst:130
msgid "``TS_EVENT_VCONN_READ_READY``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:103
#: ../../sdk/continuations/writing-handler-functions.en.rst:105
#: ../../sdk/continuations/writing-handler-functions.en.rst:107
msgid "``TSVConnRead``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:103
#: ../../sdk/continuations/writing-handler-functions.en.rst:104
#: ../../sdk/continuations/writing-handler-functions.en.rst:105
#: ../../sdk/continuations/writing-handler-functions.en.rst:106
#: ../../sdk/continuations/writing-handler-functions.en.rst:107
#: ../../sdk/continuations/writing-handler-functions.en.rst:108
#: ../../sdk/continuations/writing-handler-functions.en.rst:109
msgid "``TSVConn``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:104
#: ../../sdk/io-guide.en.rst:137
msgid "``TS_EVENT_VCONN_WRITE_READY``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:104
#: ../../sdk/continuations/writing-handler-functions.en.rst:106
msgid "``TSVConnWrite``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:105
#: ../../sdk/io-guide.en.rst:142
msgid "``TS_EVENT_VCONN_READ_COMPLETE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:106
#: ../../sdk/io-guide.en.rst:147
msgid "``TS_EVENT_VCONN_WRITE_COMPLETE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:107
#: ../../sdk/io-guide.en.rst:156
msgid "``TS_EVENT_VCONN_EOS``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:108
msgid "``TS_EVENT_NET_CONNECT``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:108
#: ../../sdk/continuations/writing-handler-functions.en.rst:109
msgid "``TSNetConnect``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:109
msgid "``TS_EVENT_NET_CONNECT_FAILED``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:110
msgid "``TS_EVENT_HTTP_CONTINUE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:111
msgid "``TS_EVENT_HTTP_ERROR``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:112
msgid "``TS_EVENT_MGMT_UPDATE``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:112
msgid "``TSMgmtUpdateRegister``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:115
msgid "The continuation functions are listed below:"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:117
msgid "``TSContCall``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:118
msgid "``TSContCreate``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:119
msgid "``TSContDataGet``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:120
msgid "``TSContDataSet``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:121
msgid "``TSContDestroy``"
msgstr ""

#: ../../sdk/continuations/writing-handler-functions.en.rst:122
msgid "``TSContMutexGet``"
msgstr ""

#: ../../sdk/getting-started.en.rst:4 ../../sdk/remap-plugin.en.rst:44
msgid "Getting Started"
msgstr ""

#: ../../sdk/getting-started.en.rst:30
msgid ""
"The Traffic Server API enables you to create plugins, using the C "
"programming language, that customize the behavior of your Traffic Server "
"installation. This chapter contains the following sections:"
msgstr ""

#: ../../sdk/getting-started.en.rst:34
msgid ""
"`Understanding Traffic Server Plugins <#UnderstandingTSPlugins>`__ -- a "
"brief introduction to plugins. For more details, see `How to Create Traffic "
"Server Plugins <../how-to-create-trafficserver-plugins>`__"
msgstr ""

#: ../../sdk/getting-started.en.rst:38
msgid ""
"`A Simple Plugin <a-simple-plugin>`__ -- walks through compiling and loading"
" an example ``hello world`` plugin."
msgstr ""

#: ../../sdk/getting-started.en.rst:41
msgid ""
"`Plugin Registration and Version Checking <plugin-registration-and-version-"
"checking>`__ -- shows you how to register your plugin and make sure it's "
"compatible with the version of Traffic Server you're using."
msgstr ""

#: ../../sdk/getting-started.en.rst:46
msgid ""
"`Naming Conventions <NamingConventions.html>`__ -- outlines Traffic Server "
"API naming conventions. For guidelines on creating plugin source code, see "
"`How to Create Traffic Server Plugins <../how-to-create-trafficserver-"
"plugins>`__"
msgstr ""

#: ../../sdk/getting-started.en.rst:52
msgid "Understanding Traffic Server Plugins"
msgstr ""

#: ../../sdk/getting-started.en.rst:54
msgid ""
"Traffic Server enables sophisticated caching and processing of web-related "
"traffic, such as DNS and HTTP requests and responses."
msgstr ""

#: ../../sdk/getting-started.en.rst:57
msgid ""
"Traffic Server itself consists of an event-driven loop that can be "
"simplified as follows:"
msgstr ""

#: ../../sdk/getting-started.en.rst:68
msgid "The Role of Plugins"
msgstr ""

#: ../../sdk/getting-started.en.rst:70
msgid ""
"You compile your plugin source code to create a shared library that Traffic "
"Server loads when it is started. Your plugin contains callback functions "
"that are registered for specific Traffic Server events. When Traffic Server "
"needs to process an event, it invokes any and all call-back functions you've"
" registered for that event type."
msgstr ""

#: ../../sdk/getting-started.en.rst:78
msgid ""
"Since plugins add object code to Traffic Server, programming errors in a "
"plugin can have serious implications. Bugs in your plugin, such as an out-"
"of-range pointer, can cause Traffic Server processes to crash and may "
"ultimately result in unpredictable behavior."
msgstr ""

#: ../../sdk/getting-started.en.rst:83
msgid "**Plugin Process** {#PluginProcess}"
msgstr ""

#: ../../sdk/getting-started.en.rst:89
msgid "Plugin Process"
msgstr ""

#: ../../sdk/getting-started.en.rst:92
msgid "Possible Uses for Plugins"
msgstr ""

#: ../../sdk/getting-started.en.rst:94
msgid "Possible uses for plugins include the following:"
msgstr ""

#: ../../sdk/getting-started.en.rst:96
msgid ""
"HTTP processing: plugins can filter, blacklist, authorize users, transform "
"content"
msgstr ""

#: ../../sdk/getting-started.en.rst:99
msgid ""
"Protocol support: plugins can enable Traffic Server to proxy-cache new "
"protocol content"
msgstr ""

#: ../../sdk/getting-started.en.rst:102
msgid "Some examples of plugins include:"
msgstr ""

#: ../../sdk/getting-started.en.rst:104
msgid ""
"**Blacklisting plugin**: denies attempts to access web sites that are off-"
"limits."
msgstr ""

#: ../../sdk/getting-started.en.rst:107
msgid "**Append transform plugin**: adds text to HTTP response content."
msgstr ""

#: ../../sdk/getting-started.en.rst:109
msgid "**Image conversion plugin**: transforms JPEG images to GIF images."
msgstr ""

#: ../../sdk/getting-started.en.rst:111
msgid ""
"**Compression plugin**: sends response content to a compression server that "
"compresses the data (alternatively, a compression library local to the "
"Traffic Server host machine could do the compression)."
msgstr ""

#: ../../sdk/getting-started.en.rst:115
msgid ""
"**Authorization plugin**: checks a user's permissions to access particular "
"web sites. The plugin could consult a local authorization program or send "
"queries to an authorization server."
msgstr ""

#: ../../sdk/getting-started.en.rst:119
msgid ""
"**A plugin that gathers client information** from request headers and enters"
" this information in a database."
msgstr ""

#: ../../sdk/getting-started.en.rst:122
msgid ""
"**Protocol plugin**: listens for specific protocol requests on a designated "
"port and then uses Traffic Server's proxy server & cache to serve client "
"requests."
msgstr ""

#: ../../sdk/getting-started.en.rst:126
msgid ""
"The figure below, `Possible Traffic Server Plugins <#possibleTSplugins>`__, "
"illustrates several types of plugins."
msgstr ""

#: ../../sdk/getting-started.en.rst:129
msgid "**Possible Traffic Server Plugins** {#possibleTSplugins}"
msgstr ""

#: ../../sdk/getting-started.en.rst:135
msgid "Possible Traffic Server Plugins"
msgstr ""

#: ../../sdk/getting-started.en.rst:137
msgid "You can find basic examples for many plugins in the SDK sample code:"
msgstr ""

#: ../../sdk/getting-started.en.rst:139
msgid ""
"``append-transform.c`` adds text from a specified file to HTTP/text "
"responses. This plugin is explained in `The Append-Transform Plugin "
"<../http-transformation-plugin/append-transform-plugin>`__"
msgstr ""

#: ../../sdk/getting-started.en.rst:143
msgid ""
"The compression plugin in the figure communicates with the server that "
"actually does the compression. The ``server-transform.c`` plugin shows how "
"to open a connection to a transformation server, have the server do the "
"transformation, and send transformed data back to the client. Although the "
"transformation is null in ``server-transform.c``, a compression or image "
"translation plugin could be implemented in a similar way."
msgstr ""

#: ../../sdk/getting-started.en.rst:151
msgid "``basic-auth.c`` performs basic HTTP proxy authorization."
msgstr ""

#: ../../sdk/getting-started.en.rst:153
msgid ""
"``blacklist-1.c`` reads blacklisted servers from a configuration file and "
"denies client access to these servers. This plugin is explained in `The "
"Blacklist Plugin <../header-based-plugin-examples/blacklist-plugin>`__."
msgstr ""

#: ../../sdk/getting-started.en.rst:159
msgid "Plugin Loading"
msgstr ""

#: ../../sdk/getting-started.en.rst:161
msgid ""
"When Traffic Server is first started, it consults the ``plugin.config`` file"
" to determine the names of all shared plugin libraries that need to be "
"loaded. The ``plugin.config`` file also defines arguments that are to be "
"passed to each plugin's initialization function, ``TSPluginInit``. The "
":file:`records.config` file defines the path to each plugin shared library, "
"as described in `Specify the Plugin's Location "
"<SpecifyingPluginLocation.html>`__."
msgstr ""

#: ../../sdk/getting-started.en.rst:169
msgid ""
"The path for each of these files is *<root_dir>*\\ ``/config/``, where "
"*<root_dir>* is where you installed Traffic Server."
msgstr ""

#: ../../sdk/getting-started.en.rst:172
msgid "Plugin Configuration"
msgstr ""

#: ../../sdk/getting-started.en.rst:174
msgid ""
"The sample ``plugin.config`` file below contains a comment line, a blank "
"line, and two plugin configurations:"
msgstr ""

#: ../../sdk/getting-started.en.rst:184
msgid ""
"Each plugin configuration in the ``plugin.config`` file resembles a UNIX or "
"DOS shell command; each line in ``plugin.config`` cannot exceed 1023 "
"characters."
msgstr ""

#: ../../sdk/getting-started.en.rst:188
msgid ""
"The first plugin configuration is for a plugin named ``my-plugin.so``. It "
"contains three arguments that are to be passed to that plugin's "
"initialization routine. The second configuration is for a plugin named "
"``some-plugin.so``; it contains three arguments. The last argument, "
"*``$proxy.config.http.cache.on``*, is actually a configuration variable. "
"Traffic Server will look up the specified configuration variable and "
"substitute its value."
msgstr ""

#: ../../sdk/getting-started.en.rst:196
msgid ""
"Plugins with global variables should not appear more than once in "
"``plugin.config``. For example, if you enter:"
msgstr ""

#: ../../sdk/getting-started.en.rst:204
msgid ""
"then the second global variable, ``header2``, will be used for both "
"instances. A simple workaround is to give different names to different "
"instances of the same plugin. For example:"
msgstr ""

#: ../../sdk/getting-started.en.rst:213
msgid "These entries will produce the desired result below:"
msgstr ""

#: ../../sdk/getting-started.en.rst:221
msgid "Configuration File Rules"
msgstr ""

#: ../../sdk/getting-started.en.rst:223
msgid "Comment lines begin with **#** and continue to the end of the line."
msgstr ""

#: ../../sdk/getting-started.en.rst:225
msgid "Blank lines are ignored."
msgstr ""

#: ../../sdk/getting-started.en.rst:227
msgid ""
"Plugins are loaded and initialized by Traffic Server in the order they "
"appear in the ``plugin.config`` file."
msgstr ""

#: ../../sdk/getting-started.en.rst:231
msgid "Plugin Initialization"
msgstr ""

#: ../../sdk/getting-started.en.rst:233
msgid ""
"Each plugin must define an initialization function named ``TSPluginInit`` "
"that Traffic Server invokes when the plugin is loaded. The ``TSPluginInit`` "
"function is commonly used to read configuration information and register "
"hooks for event notification."
msgstr ""

#: ../../sdk/getting-started.en.rst:238
msgid "The ``TSPluginInit`` function has two arguments:"
msgstr ""

#: ../../sdk/getting-started.en.rst:240
msgid ""
"The ``argc`` argument represents the number of arguments defined in the "
"``plugin.config`` file for that particular plugin"
msgstr ""

#: ../../sdk/getting-started.en.rst:243
msgid ""
"The ``argv`` argument is an array of pointers to the actual arguments "
"defined in the ``plugin.config`` file for that plugin"
msgstr ""

#: ../../sdk/getting-started.en.rst:246
msgid ""
"See `TSPluginInit <InitializationFunctions.html#TSPluginInit>`__ for details"
" about ``TSPluginInit``."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:2
msgid "A Simple Plugin"
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:21
msgid ""
"This section describes how to write, compile, configure, and run a simple "
"Traffic Server plugin. You'll follow the steps below:"
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:24
#: ../../sdk/troubleshooting-tips/unable-to-load-plugins.en.rst:23
msgid ""
"Make sure that your plugin source code contains an ``TSPluginInit`` "
"initialization function."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:27
#: ../../sdk/troubleshooting-tips/unable-to-load-plugins.en.rst:26
msgid "Compile your plugin source code, creating a shared library."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:29
msgid "Add an entry to your plugin's ``plugin.config`` file."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:31
msgid ""
"Add the path to your plugin shared library into the :file:`records.config` "
"file."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:34
#: ../../sdk/troubleshooting-tips/unable-to-load-plugins.en.rst:33
msgid "Restart Traffic Server."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:37
msgid "Compile Your Plugin"
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:39
msgid ""
"The process for compiling a shared library varies with the platform used, so"
" the Traffic Server API provides the tsxs tool which you can use to create "
"shared libraries on all the supported Traffic Server platforms."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:45
#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:2
#: ../../sdk/troubleshooting-tips.en.rst:40
msgid "Example"
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:47
msgid ""
"Assuming the sample program is stored in the file ``hello-world.c``, you "
"could use the following commands to build a shared library"
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:54
msgid "This shared library will be your plugin. In order to install it, run"
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:60
msgid "or the equivalent to ``sudo`` on your platform."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:63
msgid "Update the ``plugin.config`` File"
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:65
msgid ""
"Your next step is to tell Traffic Server about the plugin by adding the "
"following line to the ``plugin.config`` file. Since our simple plugin does "
"not require any arguments, the following ``plugin.config`` will work:"
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:75
msgid ""
"Traffic Server can accommodate multiple plugins. If several plugin functions"
" are triggered by the same event, then Traffic Server invokes each plugin's "
"function in the order each was defined in the ``plugin.config`` file."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:81
msgid "Specify the Plugin's Location"
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:83
msgid ""
"All plugins must be located in the directory specified by the configuration "
"variable ``proxy.config.plugin.plugin_dir``, which is located in the "
":file:`records.config` file. The directory can be specified as an absolute "
"or relative path."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:88
msgid ""
"If a relative path is used, then the starting directory will be the Traffic "
"Server installation directory as specified in ``/etc/traffic_server``. The "
"default value is ``libexec/trafficserver``, but this can vary based on how "
"the software was configured and built. It is common to use the default "
"directory. Be sure to place the shared library ``hello-world.so`` inside the"
" directory you've configured."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:96
msgid "Restart Traffic Server"
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:98
msgid ""
"The last step is to start/restart Traffic Server. Shown below is the output "
"displayed after you've created and loaded your ``hello-world`` plugin."
msgstr ""

#: ../../sdk/getting-started/a-simple-plugin.en.rst:114
msgid ""
"**Note:** in the example above, Traffic Server notes are directed to the "
"console by specifying ``E`` for ``proxy.config.diags.output.note`` in "
":file:`records.config`. The second note shows Traffic Server attempting to "
"load the ``hello-world`` plugin. The third line of Traffic Server output is "
"from your plugin."
msgstr ""

#: ../../sdk/getting-started/naming-conventions.en.rst:2
msgid "Naming Conventions"
msgstr ""

#: ../../sdk/getting-started/naming-conventions.en.rst:21
msgid "The Traffic Server API adheres to the following naming conventions:"
msgstr ""

#: ../../sdk/getting-started/naming-conventions.en.rst:23
msgid ""
"The ``TS`` prefix is used for all function and variable names defined in the"
" Traffic Server API. **Examples**: ``TS_EVENT_NONE``,\\ ``TSMutex``, and "
"``TSContCreate``"
msgstr ""

#: ../../sdk/getting-started/naming-conventions.en.rst:27
msgid ""
"Enumerated values are always written in all uppercase letters. **Examples**:"
" *``TS_EVENT_NONE``* and *``TS_VC_CLOSE_ABORT``*"
msgstr ""

#: ../../sdk/getting-started/naming-conventions.en.rst:30
msgid ""
"Constant values are all uppercase; enumerated values can be seen as a subset"
" of constants. **Examples**: ``TS_URL_SCHEME_FILE`` and "
"``TS_MIME_FIELD_ACCEPT``"
msgstr ""

#: ../../sdk/getting-started/naming-conventions.en.rst:34
msgid ""
"The names of defined types are mixed-case. **Examples**: *``TSHttpSsn``* and"
" *``TSHttpTxn``*"
msgstr ""

#: ../../sdk/getting-started/naming-conventions.en.rst:37
msgid ""
"Function names are mixed-case. **Examples**: ``TSUrlCreate`` and "
"``TSContDestroy``"
msgstr ""

#: ../../sdk/getting-started/naming-conventions.en.rst:40
msgid ""
"Function names use the following subject-verb naming style: "
"``TS-<subject>-<verb>``, where ``<subject>`` goes from general to specific. "
"This makes it easier to determine what a function does by reading its name. "
"**For** **example**: the function to retrieve the password field (the "
"specific subject) from a URL (the general subject) is ``TSUrlPasswordGet``."
msgstr ""

#: ../../sdk/getting-started/naming-conventions.en.rst:47
msgid ""
"Common verbs like ``Create``, ``Destroy``, ``Get``, ``Set``, ``Copy``, "
"``Find``, ``Retrieve``, ``Insert``, ``Remove``, and ``Delete`` are used only"
" when appropriate."
msgstr ""

#: ../../sdk/getting-started/plugin-registration-and-version-checking.en.rst:2
msgid "Plugin Registration and Version Checking"
msgstr ""

#: ../../sdk/getting-started/plugin-registration-and-version-checking.en.rst:21
msgid ""
"Make sure that the functions in your plugin are supported in your version of"
" Traffic Server."
msgstr ""

#: ../../sdk/getting-started/plugin-registration-and-version-checking.en.rst:24
msgid "Use the following interfaces:"
msgstr ""

#: ../../sdk/getting-started/plugin-registration-and-version-checking.en.rst:26
msgid ""
"```TSPluginRegister`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a6d7f514e70abaf097c4a3f1ba01f6df8>`__"
msgstr ""

#: ../../sdk/getting-started/plugin-registration-and-version-checking.en.rst:27
msgid ""
"```TSTrafficServerVersionGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a3ef91e01612ffdce6dd040f836db08e8>`__"
msgstr ""

#: ../../sdk/getting-started/plugin-registration-and-version-checking.en.rst:29
msgid ""
"The following version of ``hello-world`` registers the plugin and ensures "
"it's running with a compatible version of Traffic Server."
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:4
msgid "Header-Based Plugin Examples"
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:29
msgid ""
"Header-based plugins read or modify the headers of HTTP messages that "
"Traffic Server sends and receives. Reading this chapter will help you to "
"understand the following topics:"
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:33
msgid "Creating continuations for your plugins"
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:35
msgid "Adding global hooks"
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:37
msgid "Adding transaction hooks"
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:39
msgid "Working with HTTP header functions"
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:41
msgid ""
"The two sample plugins discussed in this chapter are ``blacklist-1.c`` and "
"``basic-auth.c``."
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:45
msgid "Overview"
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:47
msgid ""
"Header-based plugins take actions based on the contents of HTTP request or "
"response headers. Examples include filtering (on the basis of requested URL,"
" source IP address, or other request header), user authentication, or user "
"redirection. Header-based plugins have the following common elements:"
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:53
msgid ""
"The plugin has a static parent continuation that scans all Traffic Server "
"headers (either request headers, response headers, or both)."
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:56
msgid ""
"The plugin has a global hook. This enables the plugin to check all "
"transactions to determine if the plugin needs to do something."
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:59
msgid ""
"The plugin gets a handle to the transaction being processed through the "
"global hook."
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:62
msgid ""
"If the plugin needs to do something to transactions in specific cases, then "
"it sets up a transaction hook for a particular event."
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:65
msgid ""
"The plugin obtains client header information and does something based on "
"that information."
msgstr ""

#: ../../sdk/header-based-plugin-examples.en.rst:68
msgid ""
"This chapter demonstrates how these components are implemented in SDK sample"
" code."
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin.en.rst:2
msgid "The Basic Authorization Plugin"
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin.en.rst:21
msgid ""
"The sample basic authorization plugin, ``basic-auth.c``, checks for basic "
"HTTP proxy authorization. In HTTP basic proxy authorization, client user "
"names and passwords are contained in the ``Proxy-Authorization`` header. The"
" password is encoded using base64 encoding. The plugin checks all incoming "
"requests for the authorization header, user name, and password. If the "
"plugin does not find all of the these, then it reenables with an error "
"(effectively stopping the transaction) and adds a transaction hook to the "
"send response header event."
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin.en.rst:32
msgid "Creating the Plugin's Parent Continuation and Global Hook"
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin.en.rst:34
msgid "The parent continuation and global hook are created as follows:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin.en.rst:36
msgid ""
"``TSHttpHookAdd (TS_HTTP_OS_DNS_HOOK, TSContCreate (auth_plugin, NULL));``"
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/implementing-the-handler-and-getting-a-handle-to-the-transaction.en.rst:2
msgid "Implementing the Handler and Getting a Handle to the Transaction"
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/implementing-the-handler-and-getting-a-handle-to-the-transaction.en.rst:21
msgid ""
"The handler function for the plugin's parent continuation is implemented as "
"follows:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/setting-a-transaction-hook.en.rst:2
msgid "Setting a Transaction Hook"
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/setting-a-transaction-hook.en.rst:21
msgid ""
"If the request does not have the ``Proxy-Authorization`` field set to Basic "
"authorization or a valid username/password, then the plugin sends the 407 "
"Proxy authorization ``required`` status code back to the client. The client "
"will then prompt the user for a username and password, and then resend the "
"request."
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/setting-a-transaction-hook.en.rst:27
msgid ""
"In the ``handle_dns`` routine, the following lines handle the authorization "
"error case:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/setting-a-transaction-hook.en.rst:37
msgid ""
"If ``handle_dns`` does not find the ``Proxy-Authorization`` field set to "
"Basic authorization or a valid username/password, then it adds a "
"``SEND_RESPONSE_HDR_HOOK`` to the transaction being processed. This means "
"that Traffic Server will call the plugin back when sending the client "
"response. ``handle_dns`` reenables the transaction with "
"``TS_EVENT_HTTP_ERROR``, which means that the plugin wants Traffic Server to"
" terminate the transaction."
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/setting-a-transaction-hook.en.rst:45
msgid ""
"When Traffic Server terminates the transaction, it sends the client an error"
" message. Because of the ``SEND_RESPONSE_HDR_HOOK``, Traffic Server calls "
"the plugin back. The ``auth-plugin`` routine calls ``handle_response`` to "
"send the client a ``407`` status code. When the client resends the request "
"with the ``Proxy-Authorization`` field, a new transaction begins."
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/setting-a-transaction-hook.en.rst:52
msgid ""
"``handle_dns`` calls ``base64_decode`` to decode the username and password; "
"``handle_dns`` also calls ``authorized`` to validate the username and "
"password. In this plugin, sample NT code is provided for password "
"validation. UNIX programmers can supply their own validation mechanism."
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/working-with-http-headers.en.rst:2
msgid "Working With HTTP Headers"
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/working-with-http-headers.en.rst:21
msgid ""
"The plugin checks all client request headers for the Proxy-Authorization "
"MIME field, which should contain the user name and password. The plugin's "
"continuation handler, ``auth-plugin``, calls ``handle_dns`` to check the "
"``Proxy-Authorization`` field. The ``handle_dns`` routine uses "
"``TSHttpTxnClientReqGet`` and ``TSMimeHdrFieldFind`` to obtain the ``Proxy-"
"Authorization`` field:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/basic-authorization-plugin/working-with-http-headers.en.rst:46
msgid ""
"If the ``Proxy-Authorization`` field is present, then the plugin checks that"
" the authentication type is \"Basic\", and the user name and password are "
"present and valid:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin.en.rst:2
msgid "The Blacklist Plugin"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin.en.rst:21
#: ../../sdk/sample-source-code.en.rst:30
msgid ""
"The sample blacklisting plugin included in the Traffic Server SDK is "
"``blacklist-1.c``. This plugin checks every incoming HTTP client request "
"against a list of blacklisted web sites. If the client requests a "
"blacklisted site, then the plugin returns an ``Access forbidden`` message to"
" the client."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin.en.rst:27
msgid ""
"The flow of HTTP processing with the blacklist plugin is illustrated in the "
"figure titled `\"Blacklist Plugin\" <../../how-to-create-trafficserver-"
"plugins#BlacklistPlugin>`__. This example also contains a simple "
"configuration management interface. It can read a list of blacklisted sites "
"from a file (``blacklist.txt``) that can be updated by a Traffic Server "
"administrator. When the configuration file is updated, Traffic Server sends "
"an event to the plugin that wakes it up to do some work."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin.en.rst:37
msgid "Creating the Parent Continuation"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin.en.rst:39
msgid ""
"You create the static parent continuation in the mandatory ``TSPluginInit`` "
"function. This parent continuation effectively **is** the plugin: the plugin"
" executes only when this continuation receives an event from Traffic Server."
" Traffic Server passes the event as an argument to the continuation's "
"handler function. When you create continuations, you must create and specify"
" their handler functions."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin.en.rst:46
msgid ""
"You can specify an optional mutex lock when you create continuations. The "
"mutex lock protects data shared by asynchronous processes. Because Traffic "
"Server has a multi-threaded design, race conditions can occur if several "
"threads try to access the same continuation's data."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin.en.rst:51
msgid ""
"Here is how the static parent continuation is created in "
":file:blacklist-1.c`:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin.en.rst:66
msgid ""
"The handler function for the plugin is ``blacklist_plugin``, and the mutex "
"is null. The continuation handler function's job is to handle the events "
"that are sent to it; accordingly, the ``blacklist_plugin`` routine consists "
"of a switch statement that covers each of the events that might be sent to "
"it:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin.en.rst:92
msgid ""
"When you write handler functions, you have to anticipate any events that "
"might be sent to the handler by hooks or by other functions. In the "
"Blacklist plugin, ``TS_EVENT_OS_DNS`` is sent because of the global hook "
"established in ``TSPluginInit``, ``TS_EVENT_HTTP_SEND_RESPONSE_HDR`` is sent"
" because the plugin contains a transaction hook (see `Setting Up a "
"Transaction Hook <setting-a-transaction-hook.html>`__). It is good practice "
"to have a default case in your switch statements."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/accessing-the-transaction-being-processed.en.rst:2
msgid "Accessing the Transaction Being Processed"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/accessing-the-transaction-being-processed.en.rst:21
msgid ""
"A continuation's handler function is of type ``TSEventFunc``; the prototype "
"is as follows:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/accessing-the-transaction-being-processed.en.rst:24
msgid ""
"``static int function_name (TSCont contp, TSEvent event, void *edata)``"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/accessing-the-transaction-being-processed.en.rst:26
msgid ""
"In general, the return value of the handler function is not used. The "
"continuation argument is the continuation being called back, the event is "
"the event being sent to the continuation, and the data pointed to by ``void "
"*edata`` depends on the type of event. The data types for each event type "
"are listed in `Writing Handler Functions <../../continuations/writing-"
"handler-functions>`__"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/accessing-the-transaction-being-processed.en.rst:33
msgid ""
"The key here is that if the event is an HTTP transaction event, then the "
"data passed to the continuation's handler is of type ``TSHttpTxn`` (a data "
"type that represents HTTP transactions). Your plugin can then do things with"
" the transaction. Here's how it looks in the code for the Blacklist plugin's"
" handler:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/accessing-the-transaction-being-processed.en.rst:58
msgid ""
"For example: when the origin server DNS lookup event is sent, "
"``blacklist_plugin`` can call ``handle_dns``\\ and pass ``txnp`` as an "
"argument."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-a-global-hook.en.rst:2
msgid "Setting a Global Hook"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-a-global-hook.en.rst:21
msgid ""
"Global hooks are always added in ``TSPluginInit`` using ``TSHttpHookAdd``. "
"The two arguments of ``TSHttpHookAdd`` are the hook ID and the continuation "
"to call when processing the event corresponding to the hook. In "
"``blacklist-1.c``, the global hook is added as follows:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-a-global-hook.en.rst:30
msgid ""
"Above, ``TS_HTTP_OS_DNS_HOOK`` is the ID for the origin server DNS lookup "
"hook and ``contp`` is the parent continuation created earlier."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-a-global-hook.en.rst:33
msgid ""
"This means that the Blacklist plugin is called at every origin server DNS "
"lookup. When it is called, the handler functio ``blacklist_plugin`` receives"
" ``TS_EVENT_HTTP_OS_DNS`` and calls ``handle_dns`` to see if the request is "
"forbidden."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-up-a-transaction-hook.en.rst:2
msgid "Setting Up a Transaction Hook"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-up-a-transaction-hook.en.rst:21
msgid ""
"The Blacklist plugin sends \"access forbidden\" messages to clients if their"
" requests are directed to blacklisted hosts. Therefore, the plugin needs a "
"transaction hook so it will be called back when Traffic Server's HTTP state "
"machine reaches the \"send response header\" event. In the Blacklist "
"plugin's ``handle_dns`` routine, the transaction hook is added as follows:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-up-a-transaction-hook.en.rst:48
msgid ""
"This code fragment shows some interesting features. The plugin is comparing "
"the requested site to the list of blacklisted sites. While the plugin is "
"using the blacklist, it must acquire the mutex lock for the blacklist to "
"prevent configuration changes in the middle of a blacklisting operation. If "
"the requested site is blacklisted, then the following things happen:"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-up-a-transaction-hook.en.rst:55
msgid ""
"A transaction hook is added with ``TSHttpTxnHookAdd``; the plugin is called "
"back at the \"send response header\" event (i.e., the plugin sends an Access"
" forbidden message to the client). You can see that in order to add a "
"transaction hook, you need a handle to the transaction being processed."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-up-a-transaction-hook.en.rst:61
msgid ""
"The transaction is reenabled using ``TSHttpTxnReenable`` with "
"``TS_EVENT_HTTP_ERROR`` as its event argument. Reenabling with an error "
"event tells the HTTP state machine to stop the transaction and jump to the "
"\"send response header\" state. Notice that if the requested site is not "
"blacklisted, then the transaction is reenabled with the "
"``TS_EVENT_HTTP_CONTINUE`` event."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-up-a-transaction-hook.en.rst:68
msgid ""
"The string and ``TSMLoc`` data stored in the marshal buffer ``bufp`` is "
"released by ``TSHandleMLocRelease`` (see `Release Marshal Buffer Handles "
"<RlsMarshalBufHandles.html>`__). Release these handles before reenabling the"
" transaction."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/setting-up-a-transaction-hook.en.rst:73
msgid ""
"In general, whenever the plugin is doing something to a transaction, it must"
" reenable the transaction when it is finished. In other words: every time "
"your handler function handles a transaction event, it must call "
"``TSHttpTxnReenable`` when it is finished. Similarly, after your plugin "
"handles session events (``TS_EVENT_HTTP_SSN_START`` and "
"``TS_EVENT_HTTP_SSN_CLOSE``), it must reenable the session with "
"``TSHttpSsnReenable``. Reenabling the transaction twice in the same plugin "
"routine is a bad error."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/working-with-http-header-functions.en.rst:2
msgid "Working with HTTP Header Functions"
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/working-with-http-header-functions.en.rst:21
msgid ""
"The Blacklist plugin examines the host header in every client transaction. "
"This is done in the ``handle_dns`` routine, using ``TSHttpTxnClientReqGet``,"
" ``TSHttpHdrUrlGet``, and ``TSUrlHostGet``."
msgstr ""

#: ../../sdk/header-based-plugin-examples/blacklist-plugin/working-with-http-header-functions.en.rst:56
msgid ""
"To access the host header, the plugin must first get the client request, "
"retrieve the URL portion, and then obtain the host header. See `HTTP Headers"
" <../../http-headers>`__ for more information about these calls. See "
"`Release Marshal Buffer Handles <../../http-headers/guide-to-trafficserver-"
"http-header-system/release-marshal-buffer-handles>`__ for guidelines on "
"using ``TSHandleMLocRelease``."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:4
msgid "How to Create Traffic Server Plugins"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:28
msgid ""
"This chapter provides a foundation for designing and writing plugins. "
"Reading this chapter will help you to understand:"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:31
msgid ""
"The asynchronous event mode. This is the design paradigm used throughout "
"Traffic Server; plugins must also follow this design. It includes the "
"callback mechanism for Traffic Server to \"wake up\" your plugin and put it "
"to work."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:36
msgid ""
"Traffic Server's HTTP processing, with an overview of the HTTP state "
"machine."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:39
msgid ""
"How plugins can hook onto and modify/extend Traffic Server's HTTP "
"processing."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:42
msgid ""
"A `roadmap for writing plugins <roadmap-for-creating-plugins>`__, with an "
"overview of the functionality provided by the Traffic Server API."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:47
msgid "The Asynchronous Event Model"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:49
msgid ""
"Traffic Server is a multi-threaded process. There are two main reasons why a"
" server might use multiple threads:"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:52
msgid ""
"To take advantage of the concurrency available with multiple CPUs and "
"multiple I/O devices."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:55
msgid ""
"To manage concurrency from having many simultaneous client connections. For "
"example, a server could create one thread for each connection, allowing the "
"operating system (OS) to control switching between threads."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:60
msgid ""
"Traffic Server uses multiple threads for the first reason. However, Traffic "
"Server does not use a separate OS thread per transaction because it would "
"not be efficient when handling thousands of simultaneous connections."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:65
msgid ""
"Instead, Traffic Server provides special event-driven mechanisms for "
"efficiently scheduling work: the event system and continuations. The **event"
" system** is used to schedule work to be done on threads. A **continuation**"
" is a passive, event-driven state machine that can do some work until it "
"reaches a waiting point; it then sleeps until it receives notification that "
"conditions are right for doing more work. For example, HTTP state machines "
"(which handle HTTP transactions) are implemented as continuations."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:74
msgid ""
"Continuation objects are used throughout Traffic Server. Some might live for"
" the duration of the Traffic Server process, while others are created "
"(perhaps by other continuations) for specific needs and then destroyed. "
"`Traffic Server Internals <#TSInternals>`__ (below) shows how the major "
"components of Traffic Server interact. Traffic Server has several "
"**processors**, such as *cache processor* and *net processor*, that "
"consolidate cache or network I/O tasks. Processors talk to the event system "
"and schedule work on threads. An executing thread calls back a continuation "
"by sending it an event. When a continuation receives an event, it wakes up, "
"does some work, and either destroys itself or goes back to sleep & waits for"
" the next event."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:86
msgid "**Traffic Server Internals** {#TSInternals}"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:91
msgid "Traffic Server Internals"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:93
msgid ""
"Plugins are typically implemented as continuations. All of the sample code "
"plugins (except ``hello-world``) are continuations that are created when "
"Traffic Server starts up; they then wait for events that trigger them into "
"activity."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:98
msgid "**Traffic Server with Plugins** {#TSwithPlugins}"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:103
msgid "Traffic Server with Plugins"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:105
msgid ""
"A plugin may consist of just one static continuation that is called whenever"
" certain events happen. Examples of such plugins include ``blacklist-1.c``, "
"``basic-auth.c``, and ``redirect-1.c``. Alternatively, a plugin might "
"dynamically create other continuations as needed. Transform plugins are "
"built in this manner: a static parent continuation checks all transactions "
"to see if any are transformable; when a transaction is transformable, the "
"static continuation creates a type of continuation called a **vconnection**."
" The vconnection lives as long as it takes to complete the transform and "
"then destroys itself. This design can be seen in all of the sample transform"
" plugins. Plugins that support new protocols also have this architecture: a "
"static continuation listens for incoming client connections and then creates"
" transaction state machines to handle each protocol transaction."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:119
msgid ""
"When you write plugins, there are several ways to send events to "
"continuations. For HTTP plugins, there is a \"hook\" mechanism that enables "
"the Traffic Server HTTP state machine to send your plugin wakeup calls when "
"needed. Additionally, several Traffic Server API functions trigger Traffic "
"Server sub-processes to send events to plugins: ``TSContCall``, "
"``TSVConnRead``, ``TSCacheWrite``, and ``TSMgmtUpdateRegister``, to name a "
"few."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:128
msgid "Traffic Server HTTP State Machine"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:130
msgid ""
"Traffic Server performs sophisticated HTTP caching and proxying. Important "
"features include checking for alternates and document freshness, filtering, "
"supporting cache hierarchies, and hosting. Traffic Server handles thousands "
"of client requests at a time and each request is handled by an HTTP state "
"machine. These machines follow a complex state diagram that includes all of "
"the states required to support Traffic Server's features. The Traffic Server"
" API provides hooks to a subset of these states, chosen for their relevance "
"to plugins. You can view the API hooks and corresponding HTTP states in the "
"`HTTP Transaction State Diagram <../http-hoooks-and-"
"transactions#HHTTPTransactionStateDiagram>`__."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:142
msgid ""
"The example in this section (below) explains how a plugin typically "
"intervenes and extends Traffic Server's processing of an HTTP transaction. "
"Complete details about hooking on to Traffic Server processes are provided "
"in `HTTP Hooks and Transactions <HTTPHooksAndTransactions.html>`__."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:149
msgid "HTTP Transaction"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:151
msgid ""
"An HTTP transaction consists of a client request for a web document and "
"Traffic Server's response. The response could be the requested web server "
"content or it could be an error message. The content could come from the "
"Traffic Server cache or Traffic Server might fetch it from the origin "
"server. The following diagram shows some states in a typical transaction - "
"specifically, the scenario wherein content is served from cache."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:159
msgid "**Simplified HTTP Transaction** {#SimplifiedHTTPTransaction}"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:164
msgid "Simplified HTTP Transaction"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:166
msgid ""
"In the diagram above, Traffic Server accepts the client connection, reads "
"the request headers, looks up the origin server's IP address, and looks for "
"the requested content in the cache. If the content is not in the cache (a "
"\"miss\"), then Traffic Server opens a connection to the origin server and "
"issues a request for the content. If the content is in the cache (a "
"\"hit\"), then Traffic Server checks it for freshness."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:173
msgid ""
"If the content is fresh, then Traffic Server sends a reply header to the "
"client. If the content is stale, then Traffic Server opens a connection to "
"the origin server and requests the content. The figure above, `Simplified "
"HTTP Transaction <#SimplifiedHTTPTransaction>`__, does *not* show behavior "
"in the event of an error. If there is an error at a any stage, then the HTTP"
" state machine jumps to the \"send reply header\" state and sends a reply. "
"If the reply is an error, then the transaction closes. If the reply is not "
"an error, then Traffic Server first sends the response content before it "
"closes the transaction."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:183
msgid "**API Hooks Corresponding to States** {#APIHooksCorrespondingtoStates}"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:188
msgid "API Hooks Corresponding to States Listed in"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:190
msgid ""
"You use hooks as triggers to start your plugin. The name of a hook reflects "
"the Traffic Server state that was *just completed*. For example, the \"OS "
"DNS lookup\" hook wakes up a plugin right *after* the origin server DNS "
"lookup. For a plugin that requires the IP address of the requested origin "
"server, this hook is the right one to use. The Blacklist plugin works in "
"this manner, as shown in the `Blacklist Plugin <#BlacklistPlugin>`__ diagram"
" below."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:198
msgid "**Blacklist Plugin** {#BlacklistPlugin}"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:203
msgid "Blacklist Plugin"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:205
msgid ""
"Traffic Server calls the Blacklist plugin right after the origin server DNS "
"lookup. The plugin checks the requested host against a list of blacklisted "
"servers; if the request is allowed, then the transaction proceeds. If the "
"host is forbidden, then the Blacklist plugin sends the transaction into an "
"error state. When the HTTP state machine gets to the \"send reply header\" "
"state, it then calls the Blacklist plugin to provide the error message "
"that's sent to the client."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:214
msgid "Types of Hooks"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:216
msgid ""
"The Blacklist plugin's hook to the \"origin server DNS lookup\" state is a "
"****global hook****, meaning that the plugin is called *every time* there's "
"an HTTP transaction with a DNS lookup event. The plugin's hook to the \"send"
" reply header\" state is a **tr**\\ ***ansaction hook***, meaning that this "
"hook is only invoked for *specified transactions* (in the Blacklist example,"
" it's only used for requests to blacklisted servers). Several examples of "
"setting up hooks are provided in the code example chapters: `Header-Based "
"Plugin Examples <../header-based-plugin-examples>`__ and `HTTP "
"Transformation Plugins <../http-transformation-plugin>`__"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins.en.rst:227
msgid ""
"**Header manipulation plugins**, such as filtering, basic authorization, or "
"redirects, usually have a global hook to the DNS lookup or the read request "
"header states. If specific actions need to be done to the transaction "
"further on, then the plugin adds itself to a transaction hook. "
"**Transformation plugins** require a \\*\\*global hook \\*\\*to check all "
"transactions for transformability followed by a **transform hook**, which is"
" a type of transaction hook used specifically for transforms."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:2
msgid "Roadmap for Creating Plugins"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:21
msgid ""
"This chapter has provided an overview of Traffic Server's HTTP processing, "
"API hooks, and the asynchronous event model. Next, you must understand the "
"capabilities of Traffic Server API functions. These are quite broad:"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:26
msgid "**HTTP header manipulation functions**"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:28
msgid ""
"Obtain information about and manipulate HTTP headers, URLs, & MIME headers."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:31
msgid "**HTTP transaction functions**"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:33
msgid ""
"Get information about and modify HTTP transactions (for example: get the "
"client IP associated to the transaction; get the server IP; get parent proxy"
" information)"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:37
msgid "**IO functions**"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:39
msgid ""
"Manipulate vconnections (virtual connections, used for network and disk I/O)"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:42
msgid "**Network connection functions**"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:44
msgid "Open connections to remote servers."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:46
msgid "**Statistics functions**"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:48
msgid "Define and compute statistics for your plugin's activity."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:50
msgid "**Traffic Server management functions**"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:52
msgid ""
"Obtain values for Traffic Server configuration and statistics variables."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:55
msgid "Below are some guidelines for creating a plugin:"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:57
msgid ""
"Decide what you want your plugin to do, based on the capabilities of the API"
" and Traffic Server. Two main kinds of example plugins provided with this "
"SDK are HTTP-based (includes header-based and response transform plugins), "
"and non-HTTP-based (a protocol plugin). These examples are discussed in the "
"next three chapters."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:63
msgid ""
"Determine where your plugin needs to hook on to Traffic Server's HTTP "
"processing (view the `HTTP Transaction State Diagram <../http-hoooks-and-"
"transactions#HTTPTransactionStateDiagram>`__"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:67
msgid ""
"Read `Header-Based Plugin Examples <../header-based-plugin-examples>`_ to "
"learn the basics of writing plugins: creating continuations and setting up "
"hooks. If you want to write a plugin that transforms data, then read `HTTP "
"Transformation Plugins <HTTPTransformationPlugins.html>`_."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:73
msgid ""
"Figure out what parts of the Traffic Server API you need to use and then "
"read about the details of those APIs in this manual's reference chapters."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:77
msgid ""
"Compile and load your plugin (see `Getting Started <../getting-started>`_"
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:80
msgid ""
"Depending on your plugin's functionality, you might start testing it by "
"issuing requests by hand and checking for the desired behavior in Traffic "
"Server log files. See the ***Traffic Server Administrator's Guide*** for "
"information about Traffic Server logs."
msgstr ""

#: ../../sdk/how-to-create-trafficserver-plugins/roadmap-for-creating-plugins.en.rst:85
msgid ""
"You can test the performance of Traffic Server running with your plugin "
"using SDKTest. You can also customize SDKTest to perform functional testing "
"on your plugin; for more information see the ***Traffic Server SDKTest "
"User's Guide***."
msgstr ""

#: ../../sdk/http-headers.en.rst:2
#: ../../sdk/http-headers/http-headers.en.rst:2
msgid "HTTP Headers"
msgstr ""

#: ../../sdk/http-headers.en.rst:21
msgid "This chapter explains the functions used to manipulate HTTP headers."
msgstr ""

#: ../../sdk/http-headers.en.rst:33
msgid "About HTTP Headers"
msgstr ""

#: ../../sdk/http-headers.en.rst:35
msgid "An ***HTTP message*** consists of the following:"
msgstr ""

#: ../../sdk/http-headers.en.rst:37
msgid "HTTP header"
msgstr ""

#: ../../sdk/http-headers.en.rst:38
msgid "body"
msgstr ""

#: ../../sdk/http-headers.en.rst:39
msgid "trailer"
msgstr ""

#: ../../sdk/http-headers.en.rst:41
msgid "The ***HTTP header*** consists of:"
msgstr ""

#: ../../sdk/http-headers.en.rst:43
msgid "A request or response line"
msgstr ""

#: ../../sdk/http-headers.en.rst:45
msgid "An HTTP **request line** contains a method, URL, and version"
msgstr ""

#: ../../sdk/http-headers.en.rst:46
msgid "A **response line** contains a version, status code, and reason phrase"
msgstr ""

#: ../../sdk/http-headers.en.rst:49
msgid "A MIME header"
msgstr ""

#: ../../sdk/http-headers.en.rst:51
msgid ""
"A **MIME header** is comprised of zero or more MIME fields. A **MIME field**"
" is composed of a field name, a colon, and (zero or more) field values. The "
"values in a field are separated by commas. An HTTP header containing a "
"request line is usually referred to as a **request**. The following example "
"shows a typical request header."
msgstr ""

#: ../../sdk/http-headers.en.rst:69
msgid ""
"The **response header** for the above request might look like the following:"
msgstr ""

#: ../../sdk/http-headers.en.rst:85
msgid ""
"The following figure illustrates an HTTP message with an expanded HTTP "
"header."
msgstr ""

#: ../../sdk/http-headers.en.rst:88
msgid "**Figure 10.1. HTTP Request/Response and Header Structure**"
msgstr ""

#: ../../sdk/http-headers.en.rst:93
msgid "HTTP Request/Response and Header Structure"
msgstr ""

#: ../../sdk/http-headers.en.rst:95
msgid "The figure below shows example HTTP request and response headers."
msgstr ""

#: ../../sdk/http-headers.en.rst:97
msgid "**Figure 10.2. Examples of HTTP Request and Response Headers**"
msgstr ""

#: ../../sdk/http-headers.en.rst:102
msgid "Examples of HTTP Request and Response Headers"
msgstr ""

#: ../../sdk/http-headers.en.rst:104
msgid ""
"The marshal buffer or ``TSMBuffer`` is a heap data structure that stores "
"parsed URLs, MIME headers, and HTTP headers. You can allocate new objects "
"out of marshal buffers and change the values within the marshal buffer. "
"Whenever you manipulate an object, you must require the handle to the object"
" (``TSMLoc``) and the marshal buffer containing the object (``TSMBuffer``)."
msgstr ""

#: ../../sdk/http-headers.en.rst:111
msgid "**Figure 10.3. Marshal Buffers and Header Locations**"
msgstr ""

#: ../../sdk/http-headers.en.rst:116
msgid "Marshal Buffers and Header Locations"
msgstr ""

#: ../../sdk/http-headers.en.rst:118
msgid "The figure above shows the following:"
msgstr ""

#: ../../sdk/http-headers.en.rst:120
msgid "The marshal buffer containing the HTTP request, ``reqest_bufp``"
msgstr ""

#: ../../sdk/http-headers.en.rst:122
msgid "``TSMLoc`` location pointer for the HTTP header (``http_hdr_loc``)"
msgstr ""

#: ../../sdk/http-headers.en.rst:124
msgid "``TSMLoc`` location pointer for the request URL (``url_loc``)"
msgstr ""

#: ../../sdk/http-headers.en.rst:126
msgid "``TSMLoc`` location pointers for the MIME header (``mime_hdr_loc``)"
msgstr ""

#: ../../sdk/http-headers.en.rst:128
msgid "``TSMLoc`` location pointers for MIME fields (``fieldi_loc``)"
msgstr ""

#: ../../sdk/http-headers.en.rst:130
msgid ""
"``TSMLoc`` location pointer for the next duplicate MIME field "
"(``next_dup_loc``)"
msgstr ""

#: ../../sdk/http-headers.en.rst:133
msgid ""
"The diagram also shows that an HTTP header contains pointers to the URL "
"location and the MIME header location. You can obtain the URL location from "
"an HTTP header using the function ``TSHttpHdrUrlGet``. To work with MIME "
"headers, you can pass either a MIME header location or an HTTP header "
"location to MIME header functions . If you pass an HTTP header to a MIME "
"header function, then the system locates the associated MIME header and "
"executes the MIME header function on the MIME header location."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system.en.rst:1
msgid "Guide to Traffic Server HTTP Header System"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system.en.rst:22
msgid "No Null-Terminated Strings"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system.en.rst:24
msgid ""
"It's not safe to assume that string data contained in marshal buffers (such "
"as URLs and MIME fields) is stored in null-terminated string copies. "
"Therefore, your plugins should always use the length parameter when "
"retrieving or manipulating these strings. You **cannot** pass in ``NULL`` "
"for string-length return values; string values returned from marshall "
"buffers are not null-terminated. If you need a null-terminated value, then "
"use ``TSstrndup`` to automatically null-terminate a string. The strings that"
" come back and are not null-terminated **cannot** be passed into the common "
"``str*()`` routines"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system.en.rst:35
msgid ""
"Values returned from a marshall buffer can be ``NULL``, which means the "
"field or object requested does not exist."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system.en.rst:38
msgid "For example (from the ``blacklist-1`` sample)"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system.en.rst:50
msgid "See the sample plugins for additional examples."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/duplicate-mime-fields-are-not-coalesced.en.rst:2
msgid "Duplicate MIME Fields Are Not Coalesced"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/duplicate-mime-fields-are-not-coalesced.en.rst:22
msgid ""
"MIME headers can contain more than one MIME field with the same name. "
"Earlier versions of Traffic Server joined multiple fields with the same name"
" into one field with composite values. This behavior came at a performance "
"cost and caused interoperability problems with older clients and servers. "
"Therefore, this version of Traffic Server does not coalesce duplicate "
"fields."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/duplicate-mime-fields-are-not-coalesced.en.rst:29
msgid ""
"Properly-behaving plugins should check for the presence of duplicate fields "
"and then iterate over the duplicate fields via :ref:``TSMimeHdrFieldNextDup "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#af2d776615afe959ed7c3639830a7061f>``."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/mime-fields-always-belong-to-an-associated-mime-header.en.rst:2
msgid "MIME Fields Always Belong to an Associated MIME Header"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/mime-fields-always-belong-to-an-associated-mime-header.en.rst:21
msgid ""
"When using Traffic Server, you cannot create a new MIME field without an "
"associated MIME header or HTTP header; MIME fields are always seen as part "
"of a MIME header or HTTP header."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/mime-fields-always-belong-to-an-associated-mime-header.en.rst:25
msgid ""
"To use a MIME field, you must specify the MIME header or HTTP header to "
"which it belongs - this is called the field's **parent header**. The "
"``TSMimeField*`` functions in older versions of the SDK have been "
"deprecated, as they do not require the parent header as inputs. The current "
"version of Traffic Server uses new functions, the **``TSMimeHdrField``** "
"series, which require you to specify the location of the parent header along"
" with the location of the MIME field. For every deprecated *``TSMimeField``*"
" function, there is a new, preferred ``TSMimeHdrField*`` function. "
"Therefore, you should use the **``TSMimeHdrField``** functions instead of "
"the deprecated *``TSMimeField``* series. Examples are provided below."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/mime-fields-always-belong-to-an-associated-mime-header.en.rst:37
#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/mime-fields-always-belong-to-an-associated-mime-header.en.rst:51
msgid "Instead of:"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/mime-fields-always-belong-to-an-associated-mime-header.en.rst:44
#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/mime-fields-always-belong-to-an-associated-mime-header.en.rst:59
msgid "You should use:"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/mime-fields-always-belong-to-an-associated-mime-header.en.rst:68
msgid ""
"In the ``TSMimeHdrField*`` function prototypes, the ``TSMLoc`` field "
"corresponds to the ``TSMLoc`` offset used the deprecated ``TSMimeField*`` "
"functions (see the discussion of parent ``TSMLoc`` in the following "
"section)."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:2
msgid "Release Marshal Buffer Handles"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:21
msgid ""
"When you fetch a component object or create a new object, you get back a "
"handle to the object location. The handle is either an ``TSMLoc`` for an "
"object location or ``char *`` for a string location. You can manipulate the "
"object through these handles, but when you are finished you need to release "
"the handle to free up system resources."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:27
msgid ""
"The general guideline is to release all ``TSMLoc`` and string handles you "
"retrieve. The one exception is the string returned by ``TSUrlStringGet``, "
"which must be freed by a call to ``TSfree``."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:31
msgid ""
"The handle release functions expect three arguments: the marshal buffer "
"containing the data, the location of the parent object, and the location of "
"the object to be released. The parent location is usually clear from the "
"creation of the ``TSMLoc`` or string. For example, if your plugin had the "
"following calls:"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:42
msgid "then your plugin would have to call:"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:48
msgid ""
"If an ``TSMLoc`` is obtained from a transaction, then it does not have a "
"parent ``TSMLoc``. Use the null ``TSMLoc`` constant ``TS_NULL_MLOC`` as its "
"parent. For example, if your plugin calls:"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:56
msgid "then you must release ``hdr_loc`` with:"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:62
msgid ""
"You need to use ``TS_NULL_MLOC`` to release any ``TSMLoc`` handles retrieved"
" by the ``TSHttpTxn*Get`` functions."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:65
msgid "Here's an example using a new ``TSMimeHdrField`` function:"
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:74
msgid "See the sample plugins for many more examples."
msgstr ""

#: ../../sdk/http-headers/guide-to-trafficserver-http-header-system/release-marshal-buffer-handles.en.rst:78
msgid ""
"You should release handles before reenabling the HTTP transaction. In other "
"words, call ``TSHandleMLocRelease`` before ``TSHttpTxnReenable``."
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:32
msgid ""
"The Traffic Server API HTTP header functions enable you to work with HTTP "
"header data stored in marshal buffers."
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:35
msgid ""
"The HTTP header data structure is a parsed version of the HTTP header "
"defined in the HTTP protocol specification. An HTTP header is composed of a "
"request or response line followed by zero or more MIME fields. In fact, an "
"HTTP header is a subclass of a MIME header; all of the MIME header routines "
"operate on HTTP headers."
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:41
msgid ""
"An HTTP **request line** is composed of a method, a URL, and version. A "
"**response line** is composed of a version, status code, and reason phrase. "
"See `About HTTP Headers <../http-headers#AboutHTTPHeaders>`__ for additional"
" details and examples."
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:46
msgid ""
"To facilitate fast comparisons and reduce storage size, Traffic Server "
"defines several pre-allocated method names. These names correspond to the "
"methods defined in the HTTP 1.1 specification"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:51
msgid "``TS_HTTP_METHOD_CONNECT``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:51
msgid "\"CONNECT\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:54
msgid "``TS_HTTP_METHOD_DELETE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:54
msgid "\"DELETE\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:57
msgid "``TS_HTTP_METHOD_GE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:57
msgid "\"GET\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:60
msgid "``TS_HTTP_METHOD_HEAD``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:60
msgid "\"HEAD\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:63
msgid "``TS_HTTP_METHOD_ICP_QUERY``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:63
msgid "\"ICP\\_QUERY\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:66
msgid "``TS_HTTP_METHOD_OPTIONS``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:66
msgid "\"OPTIONS\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:69
msgid "``TS_HTTP_METHOD_POST``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:69
msgid "\"POST\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:72
msgid "``TS_HTTP_METHOD_PURGE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:72
msgid "\"PURGE\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:75
msgid "``TS_HTTP_METHOD_PUT``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:75
msgid "\"PUT\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:78
msgid "``TS_HTTP_METHOD_TRACE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:78
msgid "\"TRACE\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:80
msgid ""
"Traffic Server also defines several common values that appear in HTTP "
"headers."
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:84
msgid "``TS_HTTP_VALUE_BYTES``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:84
msgid "\"bytes\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:87
msgid "``TS_HTTP_VALUE_CHUNKED``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:87
msgid "\"chunked\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:90
msgid "``TS_HTTP_VALUE_CLOSE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:90
msgid "\"close\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:93
msgid "``TS_HTTP_VALUE_COMPRESS``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:93
msgid "\"compress\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:96
msgid "``TS_HTTP_VALUE_DEFLATE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:96
msgid "\"deflate\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:99
msgid "``TS_HTTP_VALUE_GZIP``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:99
msgid "\"gzip\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:102
msgid "``TS_HTTP_VALUE_IDENTITY``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:102
msgid "\"identity\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:105
msgid "``TS_HTTP_VALUE_KEEP_ALIVE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:105
msgid "\"keep-alive\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:108
msgid "``TS_HTTP_VALUE_MAX_AGE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:108
msgid "\"max-age\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:111
msgid "``TS_HTTP_VALUE_MAX_STALE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:111
msgid "\"max-stale\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:114
msgid "``TS_HTTP_VALUE_MIN_FRESH``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:114
msgid "\"min-fresh\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:117
msgid "``TS_HTTP_VALUE_MUST_REVALIDATE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:117
msgid "\"must-revalidate\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:120
msgid "``TS_HTTP_VALUE_NONE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:120
msgid "\"none\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:123
msgid "``TS_HTTP_VALUE_NO_CACHE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:123
msgid "\"no-cache\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:126
msgid "``TS_HTTP_VALUE_NO_STORE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:126
msgid "\"no-store\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:129
msgid "``TS_HTTP_VALUE_NO_TRANSFORM``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:129
msgid "\"no-transform\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:132
msgid "``TS_HTTP_VALUE_ONLY_IF_CACHED``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:132
msgid "\"only-if-cached\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:135
msgid "``TS_HTTP_VALUE_PRIVATE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:135
msgid "\"private\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:138
msgid "``TS_HTTP_VALUE_PROXY_REVALIDATE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:138
msgid "\"proxy-revalidate\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:141
msgid "``TS_HTTP_VALUE_PUBLIC``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:141
msgid "\"public\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:144
msgid "``TS_HTTP_VALUE_S_MAX_AGE``"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:144
msgid "\"s-maxage\""
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:146
msgid ""
"The method names and header values above are defined in ``ts.h`` as ``const "
"char*`` strings. When Traffic Server sets a method or a header value, it "
"checks to make sure that the new value is one of the known values. If it is,"
" then it stores a pointer into a global table (instead of storing the known "
"value in the marshal buffer). The method names and header values listed "
"above are also pointers into this table. This allows simple pointer "
"comparison of the value returned from ``TSHttpMethodGet`` with one of the "
"values listed above. It is also recommended that you use the above values "
"when referring to one of the known schemes, since this removes the "
"possibility of a spelling error."
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:157
msgid "The **HTTP Header Functions** are listed below:"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:159
msgid ""
"```TSHttpHdrClone`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#abd410a18e8bc73298302c4ff3ee9b0c6>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:160
msgid ""
"```TSHttpHdrCopy`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a5ff26f3836a74e885113423dfd4d9ed6>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:161
msgid ""
"```TSHttpHdrCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a8bbd8c2aaf70fb579af4520053fd5e10>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:162
msgid ""
"```TSHttpHdrDestroy`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a500ac4aae8f369221cf3ac2e3ce0d2a0>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:163
msgid ""
"```TSHttpHdrLengthGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a3afc557e4e99565ab81bf6437b65181b>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:164
msgid ""
"```TSHttpHdrMethodGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a358627e05506baa5c8270891652ac4d2>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:165
msgid ""
"```TSHttpHdrMethodSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a32bbcacacbef997e89c04cc3898b0ca4>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:166
msgid ""
"```TSHttpHdrPrint`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a7c88f30d6325a461fb038e6a117b3731>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:167
msgid ""
"```TSHttpHdrReasonGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a8b1609e9c8a8a52ebe7762b6109d3bef>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:168
msgid ""
"```TSHttpHdrReasonLookup`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ab49fded8874b8e3e17cf4395c9832378>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:169
msgid ""
"```TSHttpHdrReasonSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ab86e5f5e7c0af2092c77327d2e0d3b23>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:170
msgid ""
"```TSHttpHdrStatusGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ac29d5acc357a0c82c83874f42b1e487b>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:171
msgid ""
"```TSHttpHdrStatusSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#af34459170ed7f3b002ddd597ae38af12>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:172
msgid ""
"```TSHttpHdrTypeGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#afc1c6f0a3258c4bc6567805df1db1ca3>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:173
msgid ""
"```TSHttpHdrTypeSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a86058d8590a665dbf43a529714202d3f>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:174
msgid ""
"```TSHttpHdrUrlGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#af149d7b5c1b8902363afc0ad658c494e>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:175
msgid ""
"```TSHttpHdrUrlSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ad935635a3918575fa6cca6843c474cfe>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:176
msgid ""
"```TSHttpHdrVersionGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a90cc8783f5d0bc159f226079aa0104e4>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:177
msgid ""
"```TSHttpHdrVersionSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aa2a2c03399cdc8dc39b8756f13e7f189>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:178
msgid ""
"```TSHttpParserClear`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a7cb1b53b4464dc71287351616d6e7509>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:179
msgid ""
"```TSHttpParserCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a6075fb4e8fc41eb75d640f258722115b>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:180
msgid "`TSHttpParserDestroy <link/to/doxyge>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:181
msgid ""
"```TSHttpHdrParseReq`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a64193b3c9ddff8bc434c1cc9332004cc>`__"
msgstr ""

#: ../../sdk/http-headers/http-headers.en.rst:182
msgid ""
"```TSHttpHdrParseResp`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a03c8a14b6ab2b7896ef0e4005222ecff>`__"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:2
msgid "Marshal Buffers"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:21
msgid ""
"A **marshal buffer**, or ``TSMBuffer``, is a heap data structure that stores"
" parsed URLs, MIME headers, and HTTP headers. You can allocate new objects "
"out of marshal buffers and change the values within a marshal buffer. "
"Whenever you manipulate an object, you require the handle to the object "
"(``TSMLoc``) and the marshal buffer containing the object (``TSMBuffer``)."
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:28
msgid ""
"Routines exist for manipulating the object based on these two pieces of "
"information. For example, see one of the following:"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:31
msgid "`HTTP Headers <http-headers>`__"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:32
msgid "`URLs <urls>`__"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:33
msgid "`MIME Headers <mime-headers>`__"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:35
msgid ""
"The **marshal buffer functions** enable you to create and destroy Traffic "
"Server's marshal buffers, which are the data structures that hold parsed "
"URLs, MIME headers, and HTTP headers."
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:40
msgid ""
"Any marshal buffer fetched by ``TSHttpTxn*Get`` will be used by other parts "
"of the system. Be careful not to destroy these shared transaction marshal "
"buffers in functions such as those below:"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:44
msgid ""
"`TSHttpTxnCachedReqGet "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a889b626142157077f4f3cfe479e8b8e2>`_"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:45
msgid ""
"`TSHttpTxnCachedRespGet "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ae8f24b8dabb5008ad11620a11682ffd6>`_"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:46
msgid ""
"`TSHttpTxnClientReqGet "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#acca66f22d0f87bf8f08478ed926006a5>`_"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:47
msgid ""
"`TSHttpTxnClientRespGet "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a92349c8363f72b1f6dfed3ae80901fff>`_"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:48
msgid ""
"`TSHttpTxnServerReqGet "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aac2343a8b47bf9150f3ff7cd4e692d57>`_"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:49
msgid ""
"`TSHttpTxnServerRespGet "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a39e8bfb199eadabb54c067ff25a9a400>`_"
msgstr ""

#: ../../sdk/http-headers/marshal-buffers.en.rst:50
msgid ""
"`TSHttpTxnTransformRespGet "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a20367f5469e8b7e73621c1316091d578>`_"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:2
msgid "MIME Headers"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:21
msgid ""
"The Traffic Server \\*\\*MIME header functions \\*\\* enable you to retrieve"
" and modify information about HTTP MIME fields."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:24
msgid ""
"An HTTP request or response consists of a header, body, and trailer. The "
"**HTTP** **header** contains a request (or response) line and a MIME header."
" A **MIME** **header** is composed of zero or more MIME fields. A **MIME** "
"**field** is composed of a field name, a colon, and zero or more field "
"values (values in a field are separated by commas)."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:30
msgid ""
"In the example below: ``Foo`` is the MIME field name, ``bar`` is the first "
"MIME field value, and ``car`` is the second MIME field value."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:38
msgid ""
"The following example is an augmented **Backus-Naur Form** (BNF) for the "
"form of a MIME header - it specifies exactly what was described above. A "
"**header** consists of zero or more **fields** that contain a name, "
"separating colon, and zero or more values. A **name** or **value** is simply"
" a string of tokens that is potentially zero length; a **token** is any "
"character except certain control characters and separators (such as colons)."
" For the purpose of retrieving a field, field names are not case-sensitive; "
"therefore, the field names ``Foo``, ``foo`` and ``fOO`` are all equivalent."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:56
msgid ""
"The MIME header data structure is a parsed version of a standard Internet "
"MIME header. The MIME header data structure is similar to the URL data "
"structure (see `URLs <urls>`__). The actual data is stored in a marshal "
"buffer; the MIME header functions operate on a marshal buffer and a location"
" (``TSMLoc``) within the buffer."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:62
msgid ""
"After a call to ``TSMimeHdrFieldDestroy``, ``TSMimeHdrFieldRemove``, or "
"``TSUrlDestroy`` is made, you must deallocate the ``TSMLoc`` handle with a "
"call to ``TSHandleMLocRelease``. You do not need to deallocate a ``NULL`` "
"handles. For example: if you call ``TSMimeHdrFieldValueStringGet`` to get "
"the value of the content type field and the field does not exist, then it "
"returns ``TS_NULL_MLOC``. In such a case, you wouldn't need to deallocate "
"the handle with a call to ``TSHandleMLocRelease``."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:71
msgid ""
"The location (``TSMLoc``) in the `MIME header functions <#MimeHeaderFxns>`__"
" can be either an HTTP header location or a MIME header location. If an HTTP"
" header location is passed to these functions, then the system locates the "
"MIME header associated with that HTTP header and executes the corresponding "
"MIME header operations specified by the functions (see the example in the "
"description of ```TSMimeHdrCopy`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a6e0a392b2e072db8e7f1d795151203b4>`__)."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:79
msgid ""
"**Note:** MIME headers may contain more than one MIME field with the same "
"name. Previous versions of Traffic Server joined multiple fields with the "
"same name into one field with composite values, but this behavior came at a "
"performance cost and caused compatability issues with older clients and "
"servers. Hence, the current version of Traffic Server does not coalesce "
"duplicate fields. Correctly-behaving plugins should check for the presence "
"of duplicate fields and iterate over the duplicate fields by using "
"``TSMimeHdrFieldNextDup``."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:88
msgid ""
"To facilitate fast comparisons and reduce storage size, Traffic Server "
"defines several pre-allocated field names. These field names correspond to "
"the field names in HTTP and NNTP headers."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:94
msgid "``TS_MIME_FIELD_ACCEPT``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:93
msgid "\"Accept\" ``TS_MIME_LEN_ACCEPT``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:98
msgid "``TS_MIME_FIELD_ACCEPT_CHARSET``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:97
msgid "\"Accept-Charset\" ``TS_MIME_LEN_ACCEPT_CHARSET``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:102
msgid "``TS_MIME_FIELD_ACCEPT_ENCODING``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:101
msgid "\"Accept-Encoding\" ``TS_MIME_LEN_ACCEPT_ENCODING``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:106
msgid "``TS_MIME_FIELD_ACCEPT_LANGUAGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:105
msgid "\"Accept-Language\" ``TS_MIME_LEN_ACCEPT_LANGUAGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:110
msgid "``TS_MIME_FIELD_ACCEPT_RANGES``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:109
msgid "\"Accept-Ranges\" ``TS_MIME_LEN_ACCEPT_RANGES``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:114
msgid "``TS_MIME_FIELD_AGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:113
msgid "\"Age\" ``TS_MIME_LEN_AGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:118
msgid "``TS_MIME_FIELD_ALLOW``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:117
msgid "\"Allow\" ``TS_MIME_LEN_ALLOW``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:122
msgid "``TS_MIME_FIELD_APPROVED``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:121
msgid "\"Approved\" ``TS_MIME_LEN_APPROVED``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:126
msgid "``TS_MIME_FIELD_AUTHORIZATION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:125
msgid "\"Authorization\" ``TS_MIME_LEN_AUTHORIZATION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:130
msgid "``TS_MIME_FIELD_BYTES``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:129
msgid "\"Bytes\" ``TS_MIME_LEN_BYTES``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:134
msgid "``TS_MIME_FIELD_CACHE_CONTROL``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:133
msgid "\"Cache-Control\" ``TS_MIME_LEN_CACHE_CONTROL``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:138
msgid "``TS_MIME_FIELD_CLIENT_IP``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:137
msgid "\"Client-ip\" ``TS_MIME_LEN_CLIENT_IP``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:142
msgid "``TS_MIME_FIELD_CONNECTION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:141
msgid "\"Connection\" ``TS_MIME_LEN_CONNECTION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:146
msgid "``TS_MIME_FIELD_CONTENT_BASE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:145
msgid "\"Content-Base\" ``TS_MIME_LEN_CONTENT_BASE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:150
msgid "``TS_MIME_FIELD_CONTENT_ENCODING``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:149
msgid "\"Content-Encoding\" ``TS_MIME_LEN_CONTENT_ENCODING``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:154
msgid "``TS_MIME_FIELD_CONTENT_LANGUAGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:153
msgid "\"Content-Language\" ``TS_MIME_LEN_CONTENT_LANGUAGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:158
msgid "``TS_MIME_FIELD_CONTENT_LENGTH``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:157
msgid "\"Content-Length\" ``TS_MIME_LEN_CONTENT_LENGTH``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:162
msgid "``TS_MIME_FIELD_CONTENT_LOCATION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:161
msgid "\"Content-Location\" ``TS_MIME_LEN_CONTENT_LOCATION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:166
msgid "``TS_MIME_FIELD_CONTENT_MD5``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:165
msgid "\"Content-MD5\" ``TS_MIME_LEN_CONTENT_MD5``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:170
msgid "``TS_MIME_FIELD_CONTENT_RANGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:169
msgid "\"Content-Range\" ``TS_MIME_LEN_CONTENT_RANGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:174
msgid "``TS_MIME_FIELD_CONTENT_TYPE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:173
msgid "\"Content-Type\" ``TS_MIME_LEN_CONTENT_TYPE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:178
msgid "``TS_MIME_FIELD_CONTROL``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:177
msgid "\"Control\" ``TS_MIME_LEN_CONTROL``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:182
msgid "``TS_MIME_FIELD_COOKIE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:181
msgid "\"Cookie\" ``TS_MIME_LEN_COOKIE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:186
msgid "``TS_MIME_FIELD_DATE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:185
msgid "\"Date\" ``TS_MIME_LEN_DATE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:190
msgid "``TS_MIME_FIELD_DISTRIBUTION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:189
msgid "\"Distribution\" ``TS_MIME_LEN_DISTRIBUTION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:194
msgid "``TS_MIME_FIELD_ETAG``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:193
msgid "\"Etag\" ``TS_MIME_LEN_ETAG``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:198
msgid "``TS_MIME_FIELD_EXPECT``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:197
msgid "\"Expect\" ``TS_MIME_LEN_EXPECT``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:202
msgid "``TS_MIME_FIELD_EXPIRES``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:201
msgid "\"Expires\" ``TS_MIME_LEN_EXPIRES``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:206
msgid "``TS_MIME_FIELD_FOLLOWUP_TO``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:205
msgid "\"Followup-To\" ``TS_MIME_LEN_FOLLOWUP_TO``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:210
msgid "``TS_MIME_FIELD_FROM``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:209
msgid "\"From\" ``TS_MIME_LEN_FROM``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:214
msgid "``TS_MIME_FIELD_HOST``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:213
msgid "\"Host\" ``TS_MIME_LEN_HOST``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:218
msgid "``TS_MIME_FIELD_IF_MATCH``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:217
msgid "\"If-Match\" ``TS_MIME_LEN_IF_MATCH``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:222
msgid "``TS_MIME_FIELD_IF_MODIFIED_SINCE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:221
msgid "\"If-Modified-Since\" ``TS_MIME_LEN_IF_MODIFIED_SINCE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:226
msgid "``TS_MIME_FIELD_IF_NONE_MATCH``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:225
msgid "\"If-None-Match\" ``TS_MIME_LEN_IF_NONE_MATCH``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:230
msgid "``TS_MIME_FIELD_IF_RANGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:229
msgid "\"If-Range\" ``TS_MIME_LEN_IF_RANGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:234
msgid "``TS_MIME_FIELD_IF_UNMODIFIED_SINCE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:233
msgid "\"If-Unmodified-Since\" ``TS_MIME_LEN_IF_UNMODIFIED_SINCE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:238
msgid "``TS_MIME_FIELD_KEEP_ALIVE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:237
msgid "\"Keep-Alive\" ``TS_MIME_LEN_KEEP_ALIVE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:242
msgid "``TS_MIME_FIELD_KEYWORDS``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:241
msgid "\"Keywords\" ``TS_MIME_LEN_KEYWORDS``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:246
msgid "``TS_MIME_FIELD_LAST_MODIFIED``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:245
msgid "\"Last-Modified\" ``TS_MIME_LEN_LAST_MODIFIED``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:250
msgid "``TS_MIME_FIELD_LINES``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:249
msgid "\"Lines\" ``TS_MIME_LEN_LINES``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:254
msgid "``TS_MIME_FIELD_LOCATION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:253
msgid "\"Location\" ``TS_MIME_LEN_LOCATION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:258
msgid "``TS_MIME_FIELD_MAX_FORWARDS``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:257
msgid "\"Max-Forwards\" ``TS_MIME_LEN_MAX_FORWARDS``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:262
msgid "``TS_MIME_FIELD_MESSAGE_ID``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:261
msgid "\"Message-ID\" ``TS_MIME_LEN_MESSAGE_ID``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:266
msgid "``TS_MIME_FIELD_NEWSGROUPS``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:265
msgid "\"Newsgroups\" ``TS_MIME_LEN_NEWSGROUPS``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:270
msgid "``TS_MIME_FIELD_ORGANIZATION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:269
msgid "\"Organization\" ``TS_MIME_LEN_ORGANIZATION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:274
msgid "``TS_MIME_FIELD_PATH``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:273
msgid "\"Path\" ``TS_MIME_LEN_PATH``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:278
msgid "``TS_MIME_FIELD_PRAGMA``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:277
msgid "\"Pragma\" ``TS_MIME_LEN_PRAGMA``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:282
msgid "``TS_MIME_FIELD_PROXY_AUTHENTICATE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:281
msgid "\"Proxy-Authenticate\" ``TS_MIME_LEN_PROXY_AUTHENTICATE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:286
msgid "``TS_MIME_FIELD_PROXY_AUTHORIZATION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:285
msgid "\"Proxy-Authorization\" ``TS_MIME_LEN_PROXY_AUTHORIZATION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:290
msgid "``TS_MIME_FIELD_PROXY_CONNECTION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:289
msgid "\"Proxy-Connection\" ``TS_MIME_LEN_PROXY_CONNECTION``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:294
msgid "``TS_MIME_FIELD_PUBLIC``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:293
msgid "\"Public\" ``TS_MIME_LEN_PUBLIC``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:298
msgid "``TS_MIME_FIELD_RANGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:297
msgid "\"Range\" ``TS_MIME_LEN_RANGE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:302
msgid "``TS_MIME_FIELD_REFERENCES``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:301
msgid "\"References\" ``TS_MIME_LEN_REFERENCES``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:306
msgid "``TS_MIME_FIELD_REFERER``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:305
msgid "\"Referer\" ``TS_MIME_LEN_REFERER``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:310
msgid "``TS_MIME_FIELD_REPLY_TO``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:309
msgid "\"Reply-To\" ``TS_MIME_LEN_REPLY_TO``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:314
msgid "``TS_MIME_FIELD_RETRY_AFTER``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:313
msgid "\"Retry-After\" ``TS_MIME_LEN_RETRY_AFTER``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:318
msgid "``TS_MIME_FIELD_SENDER``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:317
msgid "\"Sender\" ``TS_MIME_LEN_SENDER``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:322
msgid "``TS_MIME_FIELD_SERVER``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:321
msgid "\"Server\" ``TS_MIME_LEN_SERVER``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:326
msgid "``TS_MIME_FIELD_SET_COOKIE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:325
msgid "\"Set-Cookie\" ``TS_MIME_LEN_SET_COOKIE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:330
msgid "``TS_MIME_FIELD_SUBJECT``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:329
msgid "\"Subject\" ``TS_MIME_LEN_SUBJECTTS_MIME_LEN_SUBJECT``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:334
msgid "``TS_MIME_FIELD_SUMMARY``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:333
msgid "\"Summary\" ``TS_MIME_LEN_SUMMARY``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:338
msgid "``TS_MIME_FIELD_TE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:337
msgid "\"TE\" ``TS_MIME_LEN_TE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:342
msgid "``TS_MIME_FIELD_TRANSFER_ENCODING``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:341
msgid "\"Transfer-Encoding\" ``TS_MIME_LEN_TRANSFER_ENCODING``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:346
msgid "``TS_MIME_FIELD_UPGRADE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:345
msgid "\"Upgrade\" ``TS_MIME_LEN_UPGRADE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:350
msgid "``TS_MIME_FIELD_USER_AGENT``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:349
msgid "\"User-Agent\" ``TS_MIME_LEN_USER_AGENT``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:354
msgid "``TS_MIME_FIELD_VARY``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:353
msgid "\"Vary\" ``TS_MIME_LEN_VARY``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:358
msgid "``TS_MIME_FIELD_VIA``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:357
msgid "\"Via\" ``TS_MIME_LEN_VIA``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:362
msgid "``TS_MIME_FIELD_WARNING``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:361
msgid "\"Warning\" ``TS_MIME_LEN_WARNING``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:366
msgid "``TS_MIME_FIELD_WWW_AUTHENTICATE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:365
msgid "\"Www-Authenticate\" ``TS_MIME_LEN_WWW_AUTHENTICATE``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:370
msgid "``TS_MIME_FIELD_XREF``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:369
msgid "\"Xref\" ``TS_MIME_LEN_XREF``"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:372
msgid ""
"The header field names above are defined in ``ts.h`` as ``const char*`` "
"strings. When Traffic Server sets the name portion of a header field (or any"
" portion for that matter), it quickly checks to see if the new value is one "
"of the known values. If it is, then Traffic Server stores a pointer into a "
"global table instead of storing the known value in the marshal buffer. The "
"header field names listed above are also pointers into this table, which "
"enables simple pointer comparison of the value returned from "
"``TSMimeHdrFieldNameGet`` with one of the values listed above. It is "
"recommended that you use the above values when referring to one of the known"
" header field names to avoid the possibility of a spelling error."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:384
msgid ""
"Traffic Server adds one important feature to MIME fields that you may not "
"know about: Traffic Server does not print a MIME field if the field name "
"begins with the '``@``\\ ' symbol. For example: a plugin can add the field "
"\"``@My-Field``\\ \" to a header. Even though Traffic Server never sends "
"that field out in a request to an origin server or in a response to a "
"client, it can be printed to Traffic Server logs by defining a custom log "
"configuration file that explicitly logs such fields. This provides a useful "
"mechanism for plugins to store information about an object in one of the "
"MIME headers associated with the object."
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:394
msgid "The MIME header functions are listed below:"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:396
msgid ""
"```TSMimeHdrFieldAppend`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ae36c9bab9147a30b259d8e0223d697f2>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:397
msgid ""
"```TSMimeHdrFieldClone`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ade66cd69ddff40d14b015a9e2cd7b46f>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:398
msgid ""
"```TSMimeHdrFieldCopy`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a612ebefde403abc216af99f9150dd66f>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:399
msgid ""
"```TSMimeHdrFieldCopyValues`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a5e4b2f68392a26643620641e50e5045b>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:400
msgid ""
"```TSMimeHdrFieldCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a7f79c0bea2ce14ced3b017eac08f8916>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:401
msgid ""
"```TSMimeHdrFieldDestroy`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a6bf2d8e95e6f3ef351f63dbe8bc54020>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:402
msgid ""
"```TSMimeHdrFieldLengthGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a8a906f22ccf7a4a04fac817dc57a785f>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:403
msgid ""
"```TSMimeHdrFieldNameGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ad68f51073e4630ad6a0433efbfeef2ea>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:404
msgid ""
"```TSMimeHdrFieldNameSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a6856f6069fa4ee67d1a788bd642d59f0>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:405
msgid ""
"```TSMimeHdrFieldNext`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#aaf3a205e8a4e7128f3fa3de70991df80>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:406
msgid ""
"```TSMimeHdrFieldNextDup`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#af2d776615afe959ed7c3639830a7061f>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:407
#: ../../sdk/http-headers/mime-headers.en.rst:408
msgid ""
"```TSMimeHdrFieldValueAppend`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ad1d4d1dda95311e3389245fd9fa961b5>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:409
msgid ""
"```TSMimeHdrFieldValueDateGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ad74a60f0da93397ee015d82f30021d15>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:410
msgid ""
"```TSMimeHdrFieldValueDateInsert`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a0520a29de96736b04f14e9d790ec8e9c>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:411
msgid ""
"```TSMimeHdrFieldValueDateSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#abf85e014cb316977dedca38c341d4369>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:412
msgid ""
"```TSMimeHdrFieldValueIntGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ace1fac92d2be75ff7cbd8eb7725d3fac>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:413
msgid ""
"```TSMimeHdrFieldValueIntSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aec96c5629a750cdaec709228c4bd8a76>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:414
msgid ""
"```TSMimeHdrFieldValueStringGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a4aa55cd4eeb9e6d0a5151c02f0c18c28>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:415
msgid ""
"```TSMimeHdrFieldValueStringInsert`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a979d1591becf1c59de830af117d54923>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:416
msgid ""
"```TSMimeHdrFieldValueStringSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ac21e44e84b25c23e52ba7bea7bd09ed6>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:417
msgid ""
"```TSMimeHdrFieldValueUintGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a116b4c9144ad6eda66213adb0167706a>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:418
msgid ""
"```TSMimeHdrFieldValueUintInsert`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a88db3a90d3ac7766e55c734c89dfe86f>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:419
msgid ""
"```TSMimeHdrFieldValueUintSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a63b0a686b4a6ec6b8a4f1b796009c3cd>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:420
msgid ""
"```TSMimeHdrFieldValuesClear`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a8fd3afaf88f6c76793fdb635bbd22113>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:421
msgid ""
"```TSMimeHdrFieldValuesCount`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a326283521986acf9b8a9ec00f3d6d164>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:422
msgid ""
"```TSMimeHdrClone`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aa8ab95bda93c3e16e6d134fe35acd1b6>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:423
msgid ""
"```TSMimeHdrCopy`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a6e0a392b2e072db8e7f1d795151203b4>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:424
msgid ""
"```TSMimeHdrCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a3427dfbd6b79c531fcba4e8c8b4e217d>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:425
msgid ""
"```TSMimeHdrDestroy`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a60ad7f4f4f9e2559dcc2ff28ebe8d96c>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:426
msgid ""
"```TSMimeHdrFieldFind`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a30e4ce224761b273a119dcd57f5a352b>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:427
msgid ""
"```TSMimeHdrFieldGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a31c0c307010a5d19d027ffb3a2656745>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:428
msgid ""
"```TSMimeHdrFieldRemove`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a96d9a50d0687456e6e67eb2e9a9c2d72>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:429
msgid ""
"```TSMimeHdrFieldsClear`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a65d7539e48c9f5c26075344dee6c6ae2>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:430
msgid ""
"```TSMimeHdrFieldsCount`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ab02f7d0cba75cf0146c6a9b507c79fcf>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:431
msgid ""
"```TSMimeHdrLengthGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a001cd786282f5c9d04189ddf7c96e269>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:432
msgid ""
"```TSMimeHdrParse`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a4a6042bcd5b5b0a21267c03cf102e90d>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:433
msgid ""
"```TSMimeParserClear`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ac173b595659d1909aae5410ecd1ce028>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:434
msgid ""
"```TSMimeParserCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a518072dc5a90b753df7726878119506b>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:435
msgid ""
"```TSMimeParserDestroy`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a5f287f5016d931842c0a5012c3d227b7>`__"
msgstr ""

#: ../../sdk/http-headers/mime-headers.en.rst:436
msgid ""
"```TSMimeHdrPrint`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#adfca8722edc6469df4410b8050406bb0>`__"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:2
msgid "URLs"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:21
msgid ""
"API URL functions provide access to URL data stored in marshal buffers. The "
"URL functions can create, copy, retrieve or delete entire URLs; they can "
"also retrieve or modify parts of URLs, such as port or scheme information."
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:26
msgid "The general form of an Internet URL is:"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:33
msgid ""
"The URL data structure includes support for two specific types of internet "
"URLs. HTTP URLs have the form:"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:41
msgid ""
"The URL port is stored as integer. All remaining parts of the URL (scheme, "
"user, etc.) are stored as strings. Traffic Server URL functions are named "
"according to the portion of the URL on which they operate. For instance, the"
" function that retrieves the host portion of a URL is named "
"``TSUrlHostGet``."
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:47
msgid ""
"To facilitate fast comparisons and reduce storage size, Traffic Server "
"defines several preallocated scheme names."
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:52
msgid "``TS_URL_SCHEME_FILE``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:51
msgid "\"file\" ``TS_URL_LEN_FILE``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:56
msgid "``TS_URL_SCHEME_FTP``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:55
msgid "\"ftp\" ``TS_URL_LEN_FTP``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:60
msgid "``TS_URL_SCHEME_GOPHER``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:59
msgid "\"gopher\" ``TS_URL_LEN_GOPHER``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:64
msgid "``TS_URL_SCHEME_HTTP``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:63
msgid "\"http\" ``TS_URL_LEN_HTTP``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:68
msgid "``TS_URL_SCHEME_HTTPS``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:67
msgid "\"https\" ``TS_URL_LEN_HTTPS``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:72
msgid "``TS_URL_SCHEME_MAILTO``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:71
msgid "\"mailto\" ``TS_URL_LEN_MAILTO``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:76
msgid "``TS_URL_SCHEME_NEWS``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:75
msgid "\"news\" ``TS_URL_LEN_NEWS``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:80
msgid "``TS_URL_SCHEME_NNTP``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:79
msgid "\"nntp\" ``TS_URL_LEN_NNTP``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:84
msgid "``TS_URL_SCHEME_PROSPERO``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:83
msgid "\"prospero\" ``TS_URL_LEN_PROSPERO``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:88
msgid "``TS_URL_SCHEME_TELNET``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:87
msgid "\"telnet\" ``TS_URL_LEN_TELNET``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:92
msgid "``TS_URL_SCHEME_WAIS``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:91
msgid "\"wais\" ``TS_URL_LEN_WAIS``"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:94
msgid ""
"The scheme names above are defined in ``ts.h`` as ``const`` ``char*`` "
"strings. When Traffic Server sets the scheme portion of the URL (or any "
"portion for that matter), it quickly checks to see if the new value is one "
"of the known values. If it is, then it stores a pointer into a global table "
"(instead of storing the known value in the marshal buffer). The scheme "
"values listed above are also pointers into this table. This allows simple "
"pointer comparison of the value returned from ``TSUrlSchemeGet`` with one of"
" the values listed above. You should use the Traffic Server-defined values "
"when referring to one of the known schemes, since doing so can prevent the "
"possibility of spelling errors."
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:105
msgid "Traffic Server **URL functions** are listed below:"
msgstr ""

#: ../../sdk/http-headers/urls.en.rst:107
msgid ""
"```TSUrlClone`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#acb775f48f1da5f6c5bf32c833a236574>`__"
" ```TSUrlCopy`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aa2b8d5f9289a23ab985210914a6301a7>`__"
" ```TSUrlCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ad3518ea3bca6a6f2d899b859c6fbbede>`__"
" ```TSUrlDestroy`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a87559aac42f4f9439399ba2bd32693fa>`__"
" ```TSUrlPrint`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#adec26f5a4afe62b4308dd86f97ae08fd>`__"
" ```TSUrlFtpTypeGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a5cd15d2c288a48b832f0fc096ed6fb80>`__"
" ```TSUrlFtpTypeSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a66df700e23085cabf945e92eb1e22890>`__"
" ```TSUrlHostGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a48e626d9497d4d81c0b9d2781f86066b>`__"
" ```TSUrlHostSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a7e550dac573f5780f7ba39509aa881f3>`__"
" ```TSUrlHttpFragmentGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a316696ad964cb6c6afb7e3028da3ef84>`__"
" ```TSUrlHttpFragmentSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a45f7b216882c4517b92929145adf5424>`__"
" ```TSUrlHttpParamsGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a9395d5d794078c8ec0f17f27dc8d8498>`__"
" ```TSUrlHttpParamsSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a566f2996d36663e3eb8ed4a8fda738c3>`__"
" ```TSUrlHttpQueryGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a74a6c51ea9f472cf29514facbf897785>`__"
" ```TSUrlHttpQuerySet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a9846aaf11accd8c817fff48bfaa784e0>`__"
" ```TSUrlLengthGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a96ded2567985b187c0a8274d76d12c17>`__"
" ```TSUrlParse`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a17f785697773b62b1f5094c06896cac5>`__"
" ```TSUrlPasswordGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a14614f77e0c15b206bab8fd6fdfa7bd1>`__"
" ```TSUrlPasswordSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#abb4d983b9d47ba5a254c2b9dd9ad835e>`__"
" ```TSUrlPathGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#aa064a2d5256d839819d1ec8f252c01a9>`__"
" ```TSUrlPathSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ad73274cb5b7e98a64d53f992681110b7>`__"
" ```TSUrlPortGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ad99bfb408a46f47c4aa9478fc1b95e0c>`__"
" ```TSUrlPortSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aab07c0482fc3c3aae1b545fb0104e3aa>`__"
" ```TSUrlSchemeGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a24c660b5b46f17b24d7a1cc9aa9a4930>`__"
" ```TSUrlSchemeSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a03b1a806ea8d79806dfff39bfe138934>`__"
" ```TSUrlStringGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a1cda3103d8dd59372609aed6c9c47417>`__"
" ```TSUrlUserGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a3c4d7ffcbbda447c3b665dc857a3226b>`__"
" ```TSUrlUserSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a3175e9c89c2bbea5ed50e2a7f52d7f9f>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:2
msgid "HTTP Hooks and Transactions"
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:21
msgid ""
"Hooks are points in Traffic Server transaction processing where plugins can "
"step in and do some work. Registering a plugin function for callback amounts"
" to \"adding\" the function to a hook. You can register your plugin to be "
"called back for every single transaction or only for specific transactions."
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:27
#: ../../sdk/io-guide.en.rst:21
msgid "This chapter contains the following sections:"
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:40
msgid "The Set of Hooks"
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:42
msgid ""
"To understand hooks and transactions, you should be familiar with the "
"following terminology:"
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:45
msgid "***HTTP Transaction***"
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:47
msgid ""
"A **transaction** consists of a single HTTP request from a client and the "
"response Traffic Server sends to that client. Thus, a transaction begins "
"when Traffic Server receives a request and ends when Traffic Server sends "
"the response."
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:52
msgid ""
"Traffic Server uses **HTTP state machines** to process transactions. The "
"state machines follow a complex set of states involved in sophisticated "
"caching and document retrieval (taking into account, for example, alternate "
"selection, freshness criteria, and hierarchical caching). The Traffic Server"
" API provides hooks to a subset of these states, as illustrated in the `HTTP"
" Transaction State Diagram <#HHTTPTxStateDiag>`__ below."
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:60
msgid "***Transform hooks***"
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:62
msgid ""
"The two **transform hooks**, ``TS_HTTP_REQUEST_TRANSFORM_HOOK`` and "
"``TS_HTTP_RESPONSE_TRANSFORM_HOOK``, are called in the course of an HTTP "
"transform. To see where in the HTTP transaction they are called, look for "
"the \"set up transform\" ovals in the `HTTP Transaction State Diagram "
"<#HHTTPTxStateDiag>`__ below."
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:68
msgid "***HTTP session***"
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:70
msgid ""
"A **session** consists of a single client connection to Traffic Server; it "
"may consist of a single transaction or several transactions in succession. "
"The session starts when the client connection opens and ends when the "
"connection closes."
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:75
msgid ""
"**HTTP Transaction State Diagram (*not yet updated*)** {#HHTTPTxStateDiag}"
msgstr ""

#: ../../sdk/http-hooks-and-transactions.en.rst:81
msgid "HTTP Transaction State Diagram"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:2
msgid "Adding Hooks"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:21
msgid "There are several ways to add hooks to your plugin."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:23
msgid ""
"**Global HTTP hooks** HTTP transaction hooks are set on a global basis using"
" the function ``TSHttpHookAdd``. This means that the continuation specified "
"as the parameter to ``TSHttpHookAdd`` is called for every transaction. "
"``TSHttpHookAdd`` must be used in ``TSPluginInit``."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:29
msgid ""
"**Transaction hooks** Transaction hooks can be used to call plugins back for"
" a specific HTTP transaction. You cannot add transaction hooks in "
"``TSPluginInit``; you first need a handle to a transaction. See `Accessing "
"the Transaction Being Processed <../header-based-plugin-examples/blacklist-"
"plugin/accessing-the-transaction-being-processed>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:35
msgid ""
"**Transformation hooks** Transformation hooks are a special case of "
"transaction hooks. See ```TSVConnCacheObjectSizeGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#af5ca2c5b00e4859d2fa5dec466dfd058>`__"
" for more information about transformation hooks. You add a transformation "
"hook using ``TSHttpTxnHookAdd``, as described in `HTTP Transactions "
"<HTTP_Transactions.html>`__."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:42
msgid ""
"**Session hooks** An HTTP session starts when a client opens a connection to"
" Traffic Server and ends when the connection closes. A session can consist "
"of several transactions. Session hooks enable you to hook your plugin to a "
"particular point in every transaction within a specified session (see `HTTP "
"Sessions <HTTPSessions.html>`__). Session hooks are added in a manner "
"similar to transaction hooks (ie, you first need a handle to an HTTP "
"session)."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:50
msgid ""
"**HTTP select alternate hook** Alternate selection hooks enable you to hook "
"on to the alternate selection state. These hooks must be added globally, "
"since Traffic Server does not have a handle to a transaction or session when"
" alternate selection is taking place. See `HTTP Alternate Selection "
"<HTTPAlternateSelection.html>`__ for information on the alternate selection "
"mechanism."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:57
msgid ""
"All of the hook addition functions (```TSHttpHookAdd`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a19a663edd3ec439f66256fbbb26cc1db>`__,"
" ```TSHttpSsnHookAdd`` <HTTPSessionFunctions.html#TSHttpSsnHookAdd>`__, "
"```TSHttpSsnReenable`` <HTTPSessionFunctions.html#TSHttpSsnReenable>`__) "
"take ``TSHttpHookID`` (identifies the hook to add on to) and ``TSCont`` (the"
" basic callback mechanism in Traffic Server). A single ``TSCont`` can be "
"added to any number of hooks at a time."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:65
msgid ""
"An HTTP hook is identified by the enumerated type ``TSHttpHookID``. The "
"values for ``TSHttpHookID`` are:"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:68
msgid "**Values for TSHttpHookID**"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:71
msgid ""
"Called after the HTTP state machine has completed the cache lookup for the "
"document requested in the ongoing transaction. Register this hook via "
"``TSHttpTxnHookAdd`` or ``TSHttpHookAdd``. Corresponds to the event "
"``TS_EVENT_HTTP_CACHE_LOOKUP_COMPLETE``."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:77
msgid ""
"Called immediately after the HTTP state machine has completed a DNS lookup "
"of the origin server. The HTTP state machine will know the origin server's "
"IP address at this point, which is useful for performing both authentication"
" and blacklisting. Corresponds to the event ``TS_EVENT_HTTP_OS_DNS``."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:84
msgid ""
"Called immediately after the request and response header of a previously-"
"cached object is read from cache. This hook is only called if the document "
"is being served from cache. Corresponds to the event "
"``TS_EVENT_HTTP_READ_CACHE_HDR``."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:90
msgid ""
"Called immediately after the response header is read from the origin server "
"or parent proxy. Corresponds to the event "
"``TS_EVENT_HTTP_READ_RESPONSE_HDR``."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:95
#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:109
msgid ""
"See \"`\"Transformations\" <../http-transformation-"
"plugin#Transformations>`__ for information about transformation hooks."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:100
msgid ""
"Called immediately after the request header is read from the client. "
"Corresponds to the event ``TS_EVENT_HTTP_READ_REQUEST_HDR``."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:106
msgid "``TS_HTTP_READ_REQUEST_PRE_REMAP_HOOK``"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:104
msgid ""
"Called after the request header is read from the client, before any "
"remapping of the headers occurs. Corresponds to the event "
"``TS_EVENT_HTTP_READ_REQUEST_PRE_REMAP``."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:114
msgid ""
"See `\"HTTP Alternate Selection\" <http-alternate-selection>`__ for "
"information about the alternate selection mechanism."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:118
msgid ""
"Called immediately before the proxy's response header is written to the "
"client; this hook is usually used for modifying the response header. "
"Corresponds to the event ``TS_EVENT_HTTP_SEND_RESPONSE_HDR``."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:124
msgid ""
"Called immediately before the proxy's request header is sent to the origin "
"server or the parent proxy. This hook is not called if the document is being"
" served from cache. This hook is usually used for modifying the proxy's "
"request header before it is sent to the origin server or parent proxy."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:131
msgid ""
"Called when an HTTP session ends. A session ends when the client connection "
"is closed. You can only add this hook as a global hook"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:135
msgid ""
"Called when an HTTP session is started. A session starts when a client "
"connects to Traffic Server. You can only add this hook as a global hook."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:140
msgid "Called when an HTTP transaction ends."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:143
msgid ""
"Called when an HTTP transaction is started. A transaction starts when either"
" a client connects to Traffic Server and data is available on the "
"connection, or a previous client connection that was left open for keep "
"alive has new data available."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/adding-hooks.en.rst:148
msgid ""
"The function you use to add a global HTTP hook is ```TSHttpHookAdd`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a19a663edd3ec439f66256fbbb26cc1db>`__."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:2
msgid "HTTP Alternate Selection"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:21
msgid ""
"The HTTP alternate selection functions provide a mechanism for hooking into "
"Traffic Server's alternate selection mechanism and augmenting it with "
"additional information. **HTTP alternate selection** refers to the process "
"of choosing between several alternate versions of a document for a specific "
"URL. Alternates arise because the HTTP 1.1 specification allows different "
"documents to be sent back for the same URL (depending on the clients "
"request). For example, a server might send back a GIF image to a client that"
" only accepts GIF images, and might send back a JPEG image to a client that "
"only accepts JPEG images."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:31
msgid ""
"The alternate selection mechanism is invoked when Traffic Server looks up a "
"URL in its cache. For each URL, Traffic Server stores a vector of "
"alternates. For each alternate in this vector, Traffic Server computes a "
"quality value between 0 and 1 that represents how \"good\" the alternate is."
" A quality value of 0 means that the alternate is unacceptable; a value of 1"
" means that the alternate is a perfect match."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:38
msgid ""
"If a plugin hooks onto the ``TS_HTTP_SELECT_ALT_HOOK``, then it will be "
"called back when Traffic Server performs alternate selection. You cannot "
"register locally to the hook ``TS_HTTP_SELECT_ALT_HOOK`` by using "
"``TSHttpTxnHookAdd`` - you can only do so by using only ``TSHttpHookAdd``. "
"Since Traffic Server does not actually have an HTTP transaction or an HTTP "
"session on hand when alternate selection is performed, it is only valid to "
"hook onto the global list of ``TS_HTTP_SELECT_ALT_HOOK``. Traffic Server "
"calls each of the select alternate hooks with the "
"``TS_EVENT_HTTP_SELECT_ALT`` event. The ``void *edata`` argument that is "
"passed to the continuation is a pointer to an ``TSHttpAltInfo`` structure. "
"It can be used later to call the HTTP alternate selection functions listed "
"at the end of this section. Unlike other hooks, this alternate selection "
"callout is non-blocking; the expectation is that the quality value for the "
"alternate will be changed by a call to ``TSHttpAltInfoQualitySet``."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:56
msgid ""
"HTTP SM does not have to be reenabled using ``TSHttpTxnReenable`` or any "
"other APIs; just return from the function."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:59
msgid "The sample code below shows how to call the alternate APIs."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:157
msgid ""
"Traffic Server augments the alternate selection through these callouts using"
" the following algorithm:"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:160
msgid ""
"Traffic Server computes its own quality value for the alternate, taking into"
" account the quality of the accept match, the encoding match, and the "
"language match."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:164
msgid ""
"Traffic Server then calls out each of the continuations on the global "
"``TS_HTTP_SELECT_ALT_HOOK``'s list."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:167
msgid ""
"It multiplies its quality value with the value returned by each callout. "
"Since all of the values are clamped to be between 0 and 1, the final value "
"will be between 0 and 1 as well."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:171
msgid ""
"This algorithm also ensures that a single callout can block the usage of a "
"given alternate by specifying a quality value of 0."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:174
msgid ""
"A common usage for the alternate selection mechanism is when a plugin "
"transforms a document for some clients and not for others, but wants to "
"store both the transformed and unchanged document. The client's request will"
" specify whether it accepted the transformed document. The plugin will then "
"determine if the alternate matches this specification and then set the "
"appropriate quality level for the alternate."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:181
msgid "The HTTP alternate selection functions are:"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:183
msgid ""
"`TSHttpAltInfoCachedReqGet "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#af4f3a56716e3e97afd582c7fdb14bcb7>`_"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:185
msgid ""
"`TSHttpAltInfoCachedRespGet "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aff5861ae4a4a7a6ce7b2d669c113b3bb>`_"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:187
msgid ""
"`TSHttpAltInfoClientReqGet "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a74d494c6442b6012d8385e92f0e14dee>`_"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-alternate-selection.en.rst:189
msgid ""
"`TSHttpAltInfoQualitySet "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a978b7160a048491d5698e0f4c0c79aad>`_"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-sessions.en.rst:2
msgid "HTTP Sessions"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-sessions.en.rst:21
msgid ""
"An **HTTP session** is an object that is defined for the lifetime of a "
"client's TCP session. The Traffic Server API enables you to add a global "
"hook to the start or end of an HTTP session, as well as add session hooks "
"that call back your plugin for every transaction within a given session. "
"When a client connects to Traffic Server, it opens up a TCP connection and "
"sends one or more HTTP requests. An individual request and its response "
"comprise the HTTP transaction. The **HTTP session** begins when the client "
"opens the connection and ends when the connection closes."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-sessions.en.rst:31
msgid "The HTTP session hooks are:"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-sessions.en.rst:33
msgid ""
"``TS_HTTP_SSN_START_HOOK`` Called when an HTTP session is started (a session"
" starts when a client connects to Traffic Server). This hook must be added "
"as a global hook."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-sessions.en.rst:37
msgid ""
"``TS_HTTP_SSN_CLOSE_HOOK`` Called when an HTTP session ends (a session ends "
"when the client connection is closed). This hook must be added as a global "
"hook."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-sessions.en.rst:41
msgid ""
"Use the session hooks to get a handle to a session (an ``TSHttpSsn`` "
"object). If you want your plugin to be called back for each transaction "
"within the session, then use ``TSHttpSsnHookAdd``."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-sessions.en.rst:45
msgid ""
"**Note:** you must reenable the session with ``TSHttpSsnReenable`` after "
"processing a session hook."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-sessions.en.rst:48
msgid "The session hook functions are listed below:"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-sessions.en.rst:50
msgid ""
"```TSHttpSsnHookAdd`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a268d493d94fa5461c8200883a9b8d20b>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-sessions.en.rst:51
msgid ""
"```TSHttpSsnReenable`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a3bbe42bf4757625bdb8bb65e7ac6f52d>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:2
msgid "HTTP Transactions"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:21
msgid ""
"The HTTP transaction functions enable you to set up plugin callbacks to HTTP"
" transactions and obtain/modify information about particular HTTP "
"transactions."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:25
msgid ""
"As described in the section on HTTP sessions, an **HTTP transaction** is an "
"object defined for the lifetime of a single request from a client and the "
"corresponding response from Traffic Server. The **``TSHttpTxn``** structure "
"is the main handle given to a plugin for manipulating a transaction's "
"internal state. Additionally, an HTTP transaction has a reference back to "
"the HTTP session that created it."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:32
msgid ""
"The sample code below illustrates how to register locally to a transaction "
"and associate data to the transaction."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:152
msgid ""
"See `Adding Hooks <adding-hooks>`__ for background about HTTP transactions "
"and HTTP hooks, as well as `HTTP Hooks and Transactions <../http-hooks-and-"
"transactions>`__ Also see the [HTTP Transaction State Diagram "
"](HTTPHooksAndTransactions.html(../http-hooks-and-"
"transactions#HHTTPTxStateDiag) for an illustration of the steps involved in "
"a typical HTTP transaction."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:159
msgid "The HTTP transaction functions are:"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:161
msgid ""
"```TSHttpTxnCacheLookupStatusGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ad26c77fa4ba251fb8ccbbd1505a74687>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:163
msgid ""
"```TSHttpTxnCachedReqGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a889b626142157077f4f3cfe479e8b8e2>`__"
" - Note that it is an error to modify cached headers."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:166
msgid ""
"```TSHttpTxnCachedRespGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ae8f24b8dabb5008ad11620a11682ffd6>`__"
" - Note that it is an error to modify cached headers."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:169
msgid "`TSHttpTxnClientIncomingPortGet <link/to/doxygen>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:171
msgid "`TSHttpTxnClientIPGet <link/to/doxygen>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:173
msgid "`TSHttpTxnClientRemotePortGet <link/to/doxygen>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:175
msgid ""
"```TSHttpTxnClientReqGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#acca66f22d0f87bf8f08478ed926006a5>`__"
" - Plugins that must read client request headers use this call to retrieve "
"the HTTP header."
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:179
msgid ""
"```TSHttpTxnClientRespGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a92349c8363f72b1f6dfed3ae80901fff>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:181
msgid ""
"```TSHttpTxnErrorBodySet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ad7efc431279dc97de4b50a58d4ed33c1>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:183
msgid ""
"```TSHttpTxnHookAdd`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a10382b88145bbfba0fa9d8ed6402f4b1>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:185
msgid ""
"```TSHttpTxnNextHopAddrGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aa0118beabfefe35d2642f007ac7afa97>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:187
msgid ""
"```TSHttpTxnParentProxySet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a2a1260b900b665d38a262544446b886c>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:189
msgid ""
"```TSHttpTxnReenable`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ac367347e02709ac809994dfb21d3288a>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:191
msgid ""
"```TSHttpTxnServerAddrGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a63917ec11275c4f1ed559362865cd65f>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:193
msgid ""
"```TSHttpTxnServerReqGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aac2343a8b47bf9150f3ff7cd4e692d57>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:195
msgid ""
"```TSHttpTxnServerRespGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a39e8bfb199eadabb54c067ff25a9a400>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:197
msgid ""
"```TSHttpTxnSsnGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a8c5190bd2e940ef2d1969a5be65f0edd>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:199
msgid ""
"```TSHttpTxnTransformedRespCache`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a213b584cd04001e8f8ad509d187a4103>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:201
msgid ""
"```TSHttpTxnTransformRespGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a4fc46502733adcff09587a436e300114>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/http-transactions.en.rst:203
msgid ""
"```TSHttpTxnUntransformedRespCache`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a8b9c0e61cbcb251417df0d06ae6c4408>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/initiate-http-connection.en.rst:2
msgid "Initiate HTTP Connection"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/initiate-http-connection.en.rst:21
msgid ""
"This function enables plugins to initiate HTTP transactions. The initiate "
"HTTP connection function is:"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/initiate-http-connection.en.rst:24
msgid ""
"```TSHttpConnect`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a2b45aa63ac1353b4c52123110197b61e>`__"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/intercepting-http-transactions.en.rst:2
msgid "Intercepting HTTP Transactions"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/intercepting-http-transactions.en.rst:21
msgid ""
"The intercepting HTTP transaction functions enable plugins to intercept "
"transactions either after the request is received or upon contact with the "
"origin server. The plugin then acts as the origin server using the "
"``TSVConn`` interface. The intercepting HTTP transaction function allow for "
"reading ``POST`` bodies in plugins as well as using alternative transports "
"to the origin server.The intercepting HTTP transaction functions are:"
msgstr ""

#: ../../sdk/http-hooks-and-transactions/intercepting-http-transactions.en.rst:29
msgid ""
"```TSHttpTxnIntercept`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a3408017633f95161e2ab4fa175c44fa3>`__"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:4
msgid "HTTP Transformation Plugins"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:23
msgid ""
"Transform plugins examine or transform HTTP message body content. For "
"example, transform plugins can:"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:26
msgid "Append text to HTML documents"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:28
msgid "Compress images"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:30
msgid "Do virus checking (on client ``POST`` data or server response data)"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:32
msgid ""
"Do content-based filtering (filter out HTML documents that contain certain "
"terms or expressions)"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:35
msgid ""
"This chapter explains how to write transform plugins. The following examples"
" are discussed in detail:"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:46
msgid "Writing Content Transform Plugins"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:48
msgid ""
"Content transformation plugins transform HTTP response content (such as "
"images or HTML documents) and HTTP request content (such as client ``POST`` "
"data). Because the data stream to be transformed is of variable length, "
"these plugins must use a mechanism that passes data from buffer to buffer "
"*and* checks to see if the end of the data stream is reached. This mechanism"
" is provided by virtual connections (``VConnection``\\ s) and virtual IO "
"descriptors (``VIO``\\ s)."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:56
msgid ""
"A ``VConnection`` is an abstraction for a data pipe that allows its users to"
" perform asynchronous reads and writes without knowing the underlying "
"implementation. A transformation is a specific type of ``VConnection``. A "
"**transformation** connects an input data source and an output data sink; "
"this feature enables it to view and modify all the data passing through it."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:63
msgid ""
"Transformations can be chained together, one after the other, so that "
"multiple transformations can be performed on the same content. The "
"``VConnection`` type, ``TSVConn``, is actually a subclass of ``TSCont``, "
"which means that ``VConnection``\\ s (and transformations) are "
"continuations. ``VConnection``\\ s and transformations can thus exchange "
"events, informing one another that data is available for reading or writing,"
" or that the end of a data stream is reached."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:71
msgid ""
"A ``VIO`` is a description of an IO operation that is in progress. Every "
"``VConnection`` has an associated *input VIO* and an associated *output "
"VIO*. When ``VConnection``\\ s are transferring data to one another, one "
"``VConnection``'s input ``VIO`` is another ``VConnection``'s output ``VIO``."
" A ``VConnection``'s input ``VIO`` is also called its **write ``VIO``** "
"because the input ``VIO`` refers to a write operation performed on the "
"``VConnection`` itself. Similarly, the outpt ``VIO`` is also called the "
"**read ``VIO``**. For transformations, which are designed to pass data in "
"one direction, you can picture the relationship between the transformation "
"``VConnection`` and its ``VIO``\\ s as follows:"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:83
msgid "**Transformation and its ``VIO``\\ s** {#TransformationAndVIOs}"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:88
msgid "A Transformation and its VIOs"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:90
msgid ""
"Because the Traffic Server API places transformations directly in the "
"response or request data stream, the transformation ``VConnection`` is "
"responsible only for reading the data from the input buffer, transforming "
"it, and then writing it to the output buffer. The upstream ``VConnection`` "
"writes the incoming data to the transformation's input buffer. In the figure"
" above, `A Transformation and its ``VIO``\\ s <#TransformationAndVIOs>`__, "
"the input ``VIO`` describes the progress of the upstream ``VConnection``'s "
"write operation on the transformation, while the output ``VIO`` describes "
"the progress of the transformation's write operation on the output "
"(downstream) ``VConnection``. The **nbytes** value in the ``VIO`` is the "
"total number of bytes to be written. The **ndone** value is the current "
"progress, or the number of bytes that have been written at a specific point "
"in time."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:104
msgid ""
"When writing a transformation plugin, you must understand implementation as "
"well as the use of ``VConnection``\\ s. The *implementor's side* refers to "
"how to implement a ``VConnection`` that others can use. At minimum, a "
"transform plugin creates a transformation that sits in the data stream and "
"must be able to handle the events that the upstream and downstream "
"``VConnection``\\ s send to it. The *user's side* refers to how to use a "
"``VConnection`` to read or write data. At the very least, transformations "
"output (write) data."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:114
#: ../../sdk/io-guide/transformations.en.rst:2
msgid "Transformations"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:117
#: ../../sdk/io-guide/vios.en.rst:2
msgid "VIOs"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:119
msgid ""
"A ``VIO``*or virtual IO is a description of an in progress IO operation. The"
" ``VIO`` data structure is used by ``VConnection`` users to determine how "
"much progress has been made on a particular IO operation, and to reenable an"
" IO operation when it stalls due to buffer space. ``VConnection`` "
"implementors use ``VIO``\\ s to determine the buffer for an IO operation, "
"how much work to do on the IO operation, and which continuation to call back"
" when progress on the IO operation is made."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:128
msgid ""
"The ``TSVIO`` data structure itself is opaque, but it might have been "
"defined as follows:"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:143
#: ../../sdk/io-guide/io-buffers.en.rst:2
msgid "IO Buffers"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:145
msgid ""
"The **IO buffer** data structure is the building block of the "
"``VConnection`` abstraction. An IO buffer is composed of a list of buffer "
"blocks which, in turn, point to buffer data. Both the *buffer block* "
"(``TSIOBufferBlock``) and *buffer data* (``TSIOBufferData``) data structures"
" are reference counted so they can reside in multiple buffers at the same "
"time. This makes it extremely efficient to copy data from one IO buffer to "
"another using ``TSIOBufferCopy``, since Traffic Server only needs to copy "
"pointers and adjust reference counts appropriately (instead of actually "
"copying any data)."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:155
msgid ""
"The IO buffer abstraction provides for a single writer and multiple readers."
" In order for the readers to have no knowledge of each other, they "
"manipulate IO buffers through the\\ ``TSIOBufferReader`` data structure. "
"Since only a single writer is allowed, there is no corresponding "
"``TSIOBufferWriter`` data structure. The writer simply modifies the IO "
"buffer directly."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:2
msgid "The Append-Transform Plugin"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:21
msgid ""
"The append-transform plugin appends text to the body of an HTTP response. It"
" obtains this text from a file; the name of the file containing the append "
"text is a parameter you specify in ``plugin.config``, as follows:"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:30
msgid ""
"The append-transform plugin is based on ``null-transform.c``. The only "
"difference is that after the plugin feeds the document through the "
"transformation, it adds text to the response."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:34
msgid ""
"Below is a list of the functions in ``append-transform.c``, in the order "
"they appear in the source code. Below each entry is a description of what "
"the function does:"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:38
msgid "**``my_data_alloc``**"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:40
msgid ""
"Allocates and initializes a ``MyData`` structure. The plugin defines a "
"struct, ``MyData``, as follows:"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:53
msgid ""
"The ``MyData`` structure is used to represent data that the transformation "
"(vconnection) needs. The transformation's data pointer is set to a "
"``MyData`` pointer using ``TSContDataSet`` in the ``handle_transform`` "
"routine."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:58
msgid "**``my_data_destroy``**"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:60
msgid ""
"Destroys objects of type ``MyData``. To deallocate the transform's data, the"
" ``append_transform`` routine (see below) calls ``my_data_destroy`` when the"
" transformation is complete."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:64
msgid "**``handle_transform``**"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:66
msgid ""
"This function does the actual data transformation. The transformation is "
"created in ``transform_add`` (see below). ``handle_transform`` is called by "
"``append_transform``."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:70
msgid "**``append_transform``**"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:72
msgid ""
"This is the handler function for the transformation vconnection created in "
"``transform_add``. It is the implementation of the vconnection."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:76
msgid ""
"If the transformation vconnection has been closed, then ``append_transform``"
" calls ``my_data_destroy`` to destroy the vonnection."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:80
msgid ""
"If ``append_transform`` receives an error event, then it calls back the "
"continuation to let it know it has completed the write operation."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:84
msgid ""
"If it receives a ``WRITE_COMPLETE`` event, then it shuts down the write "
"portion of its vconnection."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:87
msgid ""
"If it receives a ``WRITE_READY`` or any other event (such as "
"``TS_HTTP_RESPONSE_TRANSFORM_HOOK``), then it calls ``handle_transform`` to "
"attempt to transform more data."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:91
msgid "**``transformable``**"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:93
msgid ""
"The plugin transforms only documents that have a content type of "
"``text/html``. This function examines the ``Content-Type`` MIME header field"
" in the response header. If the value of the MIME field is ``text/html``, "
"then the function returns 1; otherwise, it returns zero."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:99
msgid "**``transform_add``**"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:101
msgid ""
"Creates the transformation for the current transaction and sets up a "
"transformation hook. The handler function for the transformation is "
"``append_transform``."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:105
msgid "**``transform_plugin``**"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:107
msgid ""
"This is the handler function for the main continuation for the plugin. "
"Traffic Server calls this function whenever it reads an HTTP response "
"header. ``transform_plugin`` does the following:"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:111
msgid "Gets a handle to the HTTP transaction being processed"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:113
msgid ""
"Calls ``transformable`` to determine whether the response document content "
"is of type ``text/html``"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:116
msgid ""
"If the content is transformable, then it calls ``transform_add`` to create "
"the transformation."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:119
msgid "Calls ``TSHttpTxnReenable`` to continue the transaction"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:121
msgid "**``load``**"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:123
msgid ""
"Opens the file containing the text to be appended and loads the contents of "
"the file into an ``TSIOBuffer`` called ``append_buffer``."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:126
msgid "**``TSPluginInit``**"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:128
msgid "Does the following:"
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:130
msgid ""
"Checks to make sure that the required configuration information (the append "
"text filename) is entered in ``plugin.config`` correctly."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:134
msgid ""
"If there is a filename, then ``TSPluginInit`` calls load to load the text."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:137
msgid ""
"Creates a continuation for the plugin. The handler for this continuation is "
"``transform_plugin``."
msgstr ""

#: ../../sdk/http-transformation-plugin/append-transform-plugin.en.rst:140
msgid ""
"Adds the plugin's continuation to ``TS_HTTP_READ_RESPONSE_HDR_HOOK``. In "
"other words, it sets up a callback of the plugin's continuation when Traffic"
" Server reads HTTP response headers."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:2
msgid "The Sample Buffered Null Transform Plugin"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:21
msgid ""
"The buffered null transform, ``bnull-transform.c``, reads the response "
"content into a buffer and then writes the full buffer out to the client. "
"Many examples of transformations, such as compression, require you to gather"
" the full response content in order to perform the transformation."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:26
msgid ""
"The buffered null transform uses a state variable to keep track of when it "
"is (a) reading data into the buffer and (b) writing the data from the buffer"
" to the downstream vconnection."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:30
msgid ""
"The following is a step-by-step walk through the buffered null transform:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:33
#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:30
msgid "Gets a handle to HTTP transactions."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:42
#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:40
msgid ""
"With this ``TSPluginInit`` routine, the plugin is called back every time "
"Traffic Server reads a response header."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:45
#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:43
msgid "Checks to see if the transaction response is transformable."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:57
msgid ""
"The default behavior for transformations is to cache the transformed content"
" (if desired, you also can tell Traffic Server to cache untransformed "
"content). Therefore, only responses received directly from an origin server "
"need to be transformed. Objects served from the cache are already "
"transformed. To determine whether the response is from the origin server, "
"the routine transformable checks the response header for the \"200 OK\" "
"server response."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:84
#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:82
msgid ""
"If the response is transformable, then the plugin creates a transformation "
"vconnection that gets called back when the response data is ready to be "
"transformed (as it is streaming from the origin server)."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:98
msgid ""
"The previous code fragment shows that the handler function for the "
"transformation vconnection is ``bnull_transform``."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:101
msgid ""
"The ``bnull_transform`` function has to handle ``ERROR``, "
"``WRITE_COMPLETE``, ``WRITE_READY``, and ``IMMEDIATE`` events. If the "
"transform is just beginning, the event received is probably ``IMMEDIATE``. "
"The ``bnull_transform`` function calls ``handle_transform`` to handle "
"``WRITE_READY`` and ``IMMEDIATE``."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:107
msgid ""
"The ``handle_transform`` function examines the data parameter for the "
"continuation passed to it (the continuation passed to ``handle_transform`` "
"is the transformation vconnection). The data structure keeps track of two "
"states: copying the data into the buffer (``STATE_BUFFER_DATA``) and writing"
" the contents of the buffer to the output vconnection "
"(``STATE_OUTPUT_DATA``)."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:114
msgid ""
"Get a handle to the input VIO (see the ``handle_buffering`` function). "
"``input_vio = TSVConnWriteVIOGet (contp);`` This is so that the "
"transformation can get information about the upstream vconnection's write "
"operation to the input buffer."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:119
msgid ""
"Copy data from the input buffer to the output buffer. See the "
"``handle_buffering`` function for the following code fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:127
msgid ""
"Tell the input buffer that the transformation has read the data. See the "
"``handle_buffering`` function for the following code fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:134
msgid ""
"Modify the input VIO to tell it how much data has been read (increase the "
"value of ``ndone``). See the ``handle_buffering`` function for the following"
" code fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:142
msgid ""
"If there is more data left to read ( if ndone < nbytes), then the "
"``handle_buffering`` function wakes up the upstream vconnection by sending "
"it ``WRITE_READY``:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:155
msgid ""
"The process of passing data through the transformation is illustrated in the"
" following diagram. The transformation sends ``WRITE_READY`` events when it "
"needs more data; when data is available, the upstream vconnection reenables "
"the transformation with an ``IMMEDIATE`` event."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:161
msgid "The following diagram illustrates the read from an input vconnection:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:164
msgid ""
"**Reading Data Into the Buffer (the ``STATE_BUFFER_DATA`` State)** "
"{#ReadingDataIntoBuffer}"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:170
msgid "Reading Data Into the Buffer the STATE\\_BUFFER\\_DATA State"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:172
msgid ""
"When the data is read into the output buffer, the ``handle_buffering`` "
"function sets the state of the transformation's data structure to "
"``STATE_OUTPUT_DATA`` and calls the upstream vconnection back with the "
"``WRITE_COMPLETE`` event."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:183
msgid ""
"The upstream vconnection will probably shut down the write operation when it"
" receives the ``WRITE_COMPLETE`` event. The handler function of the "
"transformation, ``bnull_transform``, receives an ``IMMEDIATE`` event and "
"calls the ``handle_transform`` function. This time, the state is "
"``STATE_OUTPUT_DATA``, so ``handle_transform`` calls ``handle_output``."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:190
msgid ""
"The ``handle_output`` function gets a handle to the output vconnection: "
"``output_conn = TSTransformOutputVConnGet (contp);``"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:193
msgid ""
"The ``handle_output`` function writes the buffer to the output vconnection:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:2
msgid "The Sample Null Transform Plugin"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:21
msgid ""
"This section provides a step-by-step description of what the null transform "
"plugin does, along with sections of code that apply. For context, you can "
"find each code snippet in the complete source code. Some of the error "
"checking details are left out - to give the description a step-by-step flow,"
" only the highlights of the transform are included."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:28
msgid "Below is an overview of the null transform plugin:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:56
msgid ""
"The default behavior for transformations is to cache the transformed content"
" (you can also tell Traffic Server to cache untransformed content, if you "
"want). Therefore, only responses received directly from an origin server "
"need to be transformed. Objects served from cache are already transformed. "
"To determine whether the response is from the origin server, the routine "
"``transformable`` checks the response header for the \"200 OK\" server "
"response."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:97
msgid ""
"The previous code fragment shows that the handler function for the "
"transformation vconnection is ``null_transform``."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:100
msgid ""
"Get a handle to the output vconnection (that receives data from the "
"tranformation)."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:108
msgid ""
"Get a handle to the input VIO. (See the ``handle_transform`` function.)"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:116
msgid ""
"This is so that the transformation can get information about the upstream "
"vconnection's write operation to the input buffer."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:119
msgid ""
"Initiate a write to the output vconnection of the specified number of bytes."
" When the write is initiated, the transformation expects to receive "
"``WRITE_READY``, ``WRITE_COMPLETE``, or ``ERROR`` events from the output "
"vconnection. See the ``handle_transform`` function for the following code "
"fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:131
msgid ""
"Copy data from the input buffer to the output buffer. See the "
"``handle_transform`` function for the following code fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:140
msgid ""
"Tell the input buffer that the transformation has read the data. See the "
"``handle_transform`` function for the following code fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:147
msgid ""
"Modify the input VIO to tell it how much data has been read (increase the "
"value of ``ndone``). See the ``handle_transform`` function for the following"
" code fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:156
msgid ""
"If there is more data left to read ( if ndone < nbytes), then the "
"``handle_transform`` function wakes up the downstream vconnection with a "
"reenable and wakes up the upstream vconnection by sending it "
"``WRITE_READY``:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:173
msgid ""
"The process of passing data through the transformation is illustrated in the"
" following diagram. The downstream vconnections send ``WRITE_READY`` events "
"when they need more data; when data is available, the upstream vconnections "
"reenable the downstream vconnections. In this instance, the "
"``TSVIOReenable`` function sends ``TS_EVENT_IMMEDIATE``."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:180
msgid ""
"**Passing Data Through a Transformation** "
"{#PassingDataThroughaTransformation}"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:186
msgid "Passing Data Through a Transformation"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:188
msgid ""
"If the ``handle_transform`` function finds there is no more data to read, "
"then it sets ``nbytes`` to ``ndone`` on the output (downstream) VIO and "
"wakes up the output vconnection with a reenable. It then triggers the end of"
" the write operation from the upstream vconnection by sending the upstream "
"vconnection a ``WRITE_COMPLETE`` event."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:203
msgid ""
"When the upstream vconnection receives the ``WRITE_COMPLETE`` event, it will"
" probably shut down the write operation."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:206
msgid ""
"Similarly, when the downstream vconnection has consumed all of the data, it "
"sends the transformation a ``WRITE_COMPLETE`` event. The transformation "
"handles this event with a shut down (the transformation shuts down the write"
" operation to the downstream vconnection). See the ``null_plugin`` function "
"for the following code fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:220
msgid "The following diagram illustrates the flow of events:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:222
msgid "**Ending the Transformation** {#EndingTransformation}"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-null-transformation-plugin.en.rst:227
msgid "Ending the Transformation"
msgstr ""

#: ../../sdk/index.en.rst:4
msgid "Programmers' Guide"
msgstr ""

#: ../../sdk/index.en.rst:23
msgid "*In progress*"
msgstr ""

#: ../../sdk/index.en.rst:25
msgid "**Abstract**"
msgstr ""

#: ../../sdk/index.en.rst:27
msgid ""
"The *Traffic Server Software Developers Kit* shows you how to create plugins"
" using the Traffic Server SDK."
msgstr ""

#: ../../sdk/index.en.rst:31
msgid "Introduction"
msgstr ""

#: ../../sdk/index.en.rst:33
msgid ""
"This documentation is a work in progress. It was originally written for a "
"previous, commercially-available version of Traffic Server that supported "
"different operating systems and more functions than the current version. As "
"a result, some of the sections may refer to functionality that no longer "
"exists."
msgstr ""

#: ../../sdk/index.en.rst:41
msgid ""
"If you find any such issues, you may want to submit a `bug or a patch "
"<https://issues.apache.org/jira/secure/CreateIssue!default.jspa?pid=12310963>`__."
" Or find out how to `find bugs <>`__, `create useful bug reports <>`__ or "
"`patches <>`__."
msgstr ""

#: ../../sdk/index.en.rst:46
msgid "Contents:"
msgstr ""

#: ../../sdk/io-guide.en.rst:2
msgid "IO Guide"
msgstr ""

#: ../../sdk/io-guide.en.rst:34
msgid "Vconnections"
msgstr ""

#: ../../sdk/io-guide.en.rst:37
msgid "Vconnections: a User's Perspective"
msgstr ""

#: ../../sdk/io-guide.en.rst:39
msgid ""
"To use a vconnection, a user must first get a handle to one. This is usually"
" accomplished by having it handed to the user; the user may also simply "
"issue a call that creates a vconnection (such as ``TSNetConnect)``. In the "
"case of transform plugins, the plugin creates a transformation vconnection "
"viav ``TSTransformCreate`` and then accesses the output vconnection using "
"``TSTransformOutputVConnGet``."
msgstr ""

#: ../../sdk/io-guide.en.rst:46
msgid ""
"After getting a handle to a vconnection, the user can then issue a read or "
"write call. It's important to note that not all vconnections support both "
"reading and writing - as of yet, there has not been a need to query a "
"vconnection about whether it can perform a read or write operation. That "
"ability should be obvious from context."
msgstr ""

#: ../../sdk/io-guide.en.rst:52
msgid ""
"To issue a read or write operation, a user calls ``TSVConnRead`` or "
"``TSVConnWrite``. These two operations both return ``VIO (TSVIO)``. The VIO "
"describes the operation being performed and how much progress has been made."
" Transform plugins initiate output to the downstream vconnection by calling "
"``TSVConnWrite``."
msgstr ""

#: ../../sdk/io-guide.en.rst:58
msgid ""
"A vconnection read or write operation is different from a normal UNIX "
"``read(2)`` or ``write(2)`` operation. Specifically, the vconnection "
"operation can specify more data to be read or written than exists in the "
"buffer handed to the operation. For example, it's typical to issue a read "
"for ``INT64_MAX`` (9 quintillion) bytes from a network vconnection in order "
"to read all the data from the network connection until the end of stream is "
"reached. This contrasts with the usual UNIX fashion of issuing repeated "
"calls to ``read(2)`` until one of the calls finally returns ``0`` to "
"indicate the end of stream was reached (indeed, the underlying "
"implementation of vconnections on UNIX still does issue those calls to "
"``read(2)``, but the interface does not expose that detail)."
msgstr ""

#: ../../sdk/io-guide.en.rst:70
msgid ""
"At most, a given vconnection can have one read operation and one write "
"operation being performed on it. This is restricted both by design and "
"common sense: if two write operations were performed on a single "
"vconnection, then the user would not be able to specify which should occur "
"first and the output would occur in an intermingled fashion. Note that both "
"a read operation and a write operation can happen on a single vconnection at"
" the same time; the restriction is for more than one operation of the same "
"type."
msgstr ""

#: ../../sdk/io-guide.en.rst:79
msgid ""
"One obvious issue is that the buffer passed to ``TSVConnRead`` and "
"``TSVConnWrite`` won't be large enough - there is no reasonable way to make "
"a buffer that can hold ``INT64_MAX`` (9 quintillion) bytes! The secret is "
"that vconnections engage in a protocol whereby they signal to the user (via "
"the continuation passed to ``TSVConnRead`` and ``TSVConnWrite``) that they "
"have emptied the buffers passed to them and are ready for more data. When "
"this occurs, it is up to the user to add more data to the buffers (or wait "
"for more data to be added) and then wake up the vconnection by calling "
"``TSVIOReenable`` on the VIO describing the operation. ``TSVIOReenable`` "
"specifies that the buffer for the operation has been modified and that the "
"vconnection should reexamine it to see if it can make further progress."
msgstr ""

#: ../../sdk/io-guide.en.rst:92
msgid ""
"The null transform plugin provides an example of how this is done. Below is "
"a prototype for ``TSVConnWrite``:"
msgstr ""

#: ../../sdk/io-guide.en.rst:100
msgid ""
"The ``connp`` is the vconnection the user is writing to and ``contp`` is the"
" \"user\" - i.e., the continuation that ``connp`` calls back when it has "
"emptied its buffer and is ready for more data."
msgstr ""

#: ../../sdk/io-guide.en.rst:104
msgid "The call made in the null transform plugin is:"
msgstr ""

#: ../../sdk/io-guide.en.rst:111
msgid ""
"In the example above, ``contp`` is the transformation vconnection that is "
"writing to the output vconnection. The number of bytes to be written is "
"obtained from ``input_vio`` by ``TSVIONBytesGet``."
msgstr ""

#: ../../sdk/io-guide.en.rst:115
msgid ""
"When a vconnection calls back its user to indicate that it wants more data "
"(or when some other condition has occurred), it issues a call to "
"``TSContCall``. It passes the ``TSVIO`` describing the operation as the data"
" parameter, and one of the values below as the event parameter."
msgstr ""

#: ../../sdk/io-guide.en.rst:121
msgid ""
"Indicates an error has occurred on the vconnection. This will happen for "
"network IO if the underlying ``read(2)`` or ``write(2)`` call returns an "
"error."
msgstr ""

#: ../../sdk/io-guide.en.rst:126
msgid ""
"The vconnection has placed data in the buffer passed to an ``TSVConnRead`` "
"operation and it would like to do more IO, but the buffer is now full. When "
"the user consumes the data from the buffer, this should re-enable the VIO so"
" it indicates to the vconnection that the buffer has been modified."
msgstr ""

#: ../../sdk/io-guide.en.rst:133
msgid ""
"The vconnection has removed data from the buffer passed to an "
"``TSVConnWrite`` operation and it would like to do more IO, but the buffer "
"does not have enough data in it. When placing more data in the buffer, the "
"user should re-enable the VIO so it indicates to the vconnection that the "
"buffer has been modified."
msgstr ""

#: ../../sdk/io-guide.en.rst:140
msgid ""
"The vconnection has read all the bytes specified by an ``TSVConnRead`` "
"operation. The vconnection can now be used to initiate a new IO operation."
msgstr ""

#: ../../sdk/io-guide.en.rst:145
msgid ""
"The vconnection has written all the bytes specified by an ``TSVConnWrite`` "
"operation and can now be used to initiate a new IO operation."
msgstr ""

#: ../../sdk/io-guide.en.rst:150
msgid ""
"An attempt was made to read past the end of the stream of bytes during the "
"handling of an ``TSVConnRead`` operation. This event occurs when the number "
"of bytes available for reading from a vconnection is less than the number of"
" bytes the user specifies should be read from the vconnection in a call to "
"``TSVConnRead``. A common case where this occurs is when the user specifies "
"that ``INT64_MAX`` bytes are to be read from a network connection."
msgstr ""

#: ../../sdk/io-guide.en.rst:158
msgid ""
"For example: the null transform plugin's transformation receives "
"``TS_EVENT_VCONN_WRITE_READY`` and ``TS_EVENT_VCONN_WRITE_COMPLETE`` events "
"from the downstream vconnection as a result of the call to ``TSVConnWrite``."
msgstr ""

#: ../../sdk/io-guide.en.rst:163
msgid ""
"After using a vconnection, the user must call ``TSVConnClose`` or "
"``TSVConnAbort``. While both calls indicate that the vconnection can destroy"
" itself, ``TSVConnAbort`` should be used when the connection is being closed"
" abnormally. After a call to ``TSVConnClose`` or ``TSVConnAbort``, the user "
"will not be called back by the vconnection again."
msgstr ""

#: ../../sdk/io-guide.en.rst:170
msgid ""
"Sometimes it's desirable to simply close down the write portion of a "
"connection while keeping the read portion open. This can be accomplished via"
" the ``TSVConnShutdown`` function, which shuts down either the read or write"
" portion of a vconnection. *Shutdown* means that the vconnection will no "
"longer call back the user with events for the portion of the connection that"
" was shut down. For example: if the user shuts down the write portion of a "
"connection, then the ``TS_EVENT_VCONN_WRITE_READY`` or "
"``TS_EVENT_VCONN_WRITE_COMPLETE`` events will not be produced. In the null "
"transform plugin, the write operation is shut down with a call to "
"``TSVConnShutdown``. To learn how vconnections are used in transformation "
"plugins, see `Writing Content Transform Plugins <../http-transformation-"
"plugin#WritingContentTransformPlugins>`__."
msgstr ""

#: ../../sdk/io-guide.en.rst:183
msgid "The vconnection functions are listed below:"
msgstr ""

#: ../../sdk/io-guide.en.rst:185
msgid ""
"```TSVConnAbort`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a08444a9b2fee637672e177ede78b6218>`__"
msgstr ""

#: ../../sdk/io-guide.en.rst:186
msgid ""
"```TSVConnClose`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a69344c2c6e57ece0990a5cee73b75215>`__"
msgstr ""

#: ../../sdk/io-guide.en.rst:187
msgid ""
"```TSVConnClosedGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a441d74cd77bf5d5564048682ca83b6ec>`__"
msgstr ""

#: ../../sdk/io-guide.en.rst:188
msgid ""
"```TSVConnRead`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a29674799a8deffdde3d6ae3231aba1dc>`__"
msgstr ""

#: ../../sdk/io-guide.en.rst:189
msgid ""
"```TSVConnReadVIOGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#aa6f8788f062737f211c788ad5fcd2813>`__"
msgstr ""

#: ../../sdk/io-guide.en.rst:190
msgid ""
"```TSVConnShutdown`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a5935b6c762b65fe87057adf94b1b00b4>`__"
msgstr ""

#: ../../sdk/io-guide.en.rst:191
msgid ""
"```TSVConnWrite`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#acea65496d1fcaf01924b0210f3129e6b>`__"
msgstr ""

#: ../../sdk/io-guide.en.rst:192
msgid ""
"```TSVConnWriteVIOGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ae9a38dbd4866c59131a1f3b806a18aab>`__"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api.en.rst:2
msgid "Guide to the Cache API"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api.en.rst:30
msgid ""
"The cache API enables plugins to read, write, and remove objects in the "
"Traffic Server cache. All cache APIs are keyed by an object called an "
"``TSCacheKey``; cache keys are created via ``TSCacheKeyCreate``; keys are "
"destroyed via ``TSCacheKeyDestroy``. Use ``TSCacheKeyDigestSet`` to set the "
"hash of the cache key."
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api.en.rst:36
msgid ""
"Note that the cache APIs differentiate between HTTP data and plugin data. "
"The cache APIs do not allow you to write HTTP docs in the cache; you can "
"only write plugin-specific data (a specific type of data that differs from "
"the HTTP type)."
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api.en.rst:41
msgid "**Example:**"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api.en.rst:54
msgid "How to Do a Cache Read"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api.en.rst:56
msgid ""
"``TSCacheRead`` does not really read - it is used for lookups (see the "
"sample Protocol plugin). Possible callback events include:"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api.en.rst:59
msgid ""
"``TS_EVENT_CACHE_OPEN_READ`` - indicates the lookup was successful. The data"
" passed back along with this event is a cache vconnection that can be used "
"to initiate a read on this keyed data."
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api.en.rst:63
msgid ""
"``TS_EVENT_CACHE_OPEN_READ_FAILED`` - indicates the lookup was unsuccessful."
" Reasons for this event could be that another continuation is writing to "
"that cache location, or the cache key doesn't refer to a cached resource. "
"Data payload for this event indicates the possible reason the read failed "
"(``TSCacheError``)."
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/errors.en.rst:2
msgid "Errors"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/errors.en.rst:21
msgid ""
"Errors pertaining to the failure of various cache operations are indicated "
"by ``TSCacheError`` (enumeration). They are as follows:"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/errors.en.rst:24
msgid "``TS_CACHE_ERROR_NO_DOC`` - the key does not match a cached resource"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/errors.en.rst:26
msgid ""
"``TS_CACHE_ERROR_DOC_BUSY`` - e.g, another continuation could be writing to "
"the cache location"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/errors.en.rst:29
msgid "``TS_CACHE_ERROR_NOT_READY`` - the cache is not ready"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:21
msgid ""
"In the example below, suppose there is a cache hit and the cache returns a "
"vconnection that enables you to read the document from cache. To do this, "
"you need to prepare a buffer (``cache_bufp``) to hold the document; "
"meanwhile, use ``TSVConnCachedObjectSizeGet`` to find out the actual size of"
" the document (``content_length``). Then, issue ``TSVConnRead`` to read the "
"document with the total data length required as ``content_length``. Assume "
"the following data:"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:38
msgid "In the ``TS_CACHE_OPEN_READ`` handler:"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:47
msgid "In the ``TS_EVENT_VCONN_READ_READY`` handler:"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:59
msgid ""
"Do not try to get continuations or VIOs from ``TSVConn`` objects for cache "
"vconnections. Also note that the following APIs can only be used on "
"transformation vconnections and must not be used on cache vconnections or "
"net vconnections:"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:64
msgid "``TSVConnWriteVIOGet``"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:66
msgid "``TSVConnReadVIOGet``"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:68
msgid "``TSVConnClosedGet``"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:70
msgid ""
"APIs such as ``TSVConnRead``, ``TSVConnWrite``, ``TSVConnClose``, "
"``TSVConnAbort``, and ``TSVConnShutdown`` can be used on any kind of "
"vconnections."
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:74
msgid "When you are finished:"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/example.en.rst:76
msgid "``TSCacheKeyDestroy (key);``"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/how-to-do-a-cache-remove.en.rst:2
msgid "How to Do a Cache Remove"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/how-to-do-a-cache-remove.en.rst:21
msgid ""
"Use ``TSCacheRemove`` to remove items from the cache. Possible callback "
"events include:"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/how-to-do-a-cache-remove.en.rst:24
msgid ""
"``TS_EVENT_CACHE_REMOVE`` - the item was removed. There is no data payload "
"for this event."
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/how-to-do-a-cache-remove.en.rst:27
msgid ""
"``TS_EVENT_CACHE_REMOVE_FAILED`` - indicates the cache was unable to remove "
"the item identified by the cache key. ``TSCacheError`` data indicates why "
"the remove failed."
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/how-to-do-a-cache-write.en.rst:2
msgid "How to Do a Cache Write"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/how-to-do-a-cache-write.en.rst:21
msgid ""
"Use ``TSCacheWrite`` to write to a cache (see the `sample Protocol plugin "
"<../../new-protocol-plugins#AboutSampleProtocol>`__). Possible callback "
"events include:"
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/how-to-do-a-cache-write.en.rst:25
msgid ""
"``TS_EVENT_CACHE_WRITE_READ`` - indicates the lookup was successful. The "
"data passed back along with this event is a cache vconnection that can be "
"used to initiate a cache write."
msgstr ""

#: ../../sdk/io-guide/guide-to-cache-api/how-to-do-a-cache-write.en.rst:29
msgid ""
"``TS_EVENT_CACHE_OPEN_WRITE_FAILED`` - event returned when another "
"continuation is currently writing to this location in the cache. Data "
"payload for this event indicates the possible reason for the write failing "
"(``TSCacheError``)."
msgstr ""

#: ../../sdk/io-guide/io-buffers.en.rst:21
msgid ""
"The IO buffer data structure is the building block of the vconnection "
"abstraction. An **IO buffer** (``TSIOBuffer``) is composed of a list of "
"buffer blocks that point to buffer data. Both the buffer block "
"(``TSIOBufferBlock``) and buffer data (``TSIOBufferData``) data structures "
"are reference-counted, so they can reside in multiple buffers at the same "
"time. This makes it extremely efficient to copy data from one IO buffer to "
"another via ``TSIOBufferCopy``, since Traffic Server must only copy pointers"
" and adjust reference counts appropriately (and doesn't actually copy any "
"data)."
msgstr ""

#: ../../sdk/io-guide/io-buffers.en.rst:31
msgid ""
"The IO buffer abstraction provides for a single writer and multiple readers."
" In order for the readers to have no knowledge of each other, they "
"manipulate IO buffers through the ``TSIOBufferReader`` data structure. Since"
" only a single writer is allowed, there is no corresponding "
"``TSIOBufferWriter`` data structure. The writer simply modifies the IO "
"buffer directly. To see an example that illustrates how to use IOBuffers, "
"refer to the sample code in the description of ```TSIOBufferBlockReadStart``"
" "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a367203e6e2cf4349e019952782deb96c>`__."
msgstr ""

#: ../../sdk/io-guide/io-buffers.en.rst:40
msgid "Additional information about IO buffer functions:"
msgstr ""

#: ../../sdk/io-guide/io-buffers.en.rst:42
msgid ""
"The ``TSIOBufferReader`` data structure tracks how much data in "
"``TSIOBuffer`` has been read. It has an offset number of bytes that is the "
"current start point of a particular buffer reader (for every read operation "
"on an ``TSIOBuffer``, you must allocate an ``TSIOBufferReader``)."
msgstr ""

#: ../../sdk/io-guide/io-buffers.en.rst:48
msgid ""
"Bytes that have already been read may not necessarily be freed within the "
"``TSIOBuffer``. To consume bytes that have been read, you must call "
"``TSIOBufferConsume``."
msgstr ""

#: ../../sdk/io-guide/net-vconnections.en.rst:2
msgid "Net Vconnections"
msgstr ""

#: ../../sdk/io-guide/net-vconnections.en.rst:21
msgid ""
"A **network** **vconnection** (or*\\* netvconnection*\\ \\*) is a wrapper "
"around a TCP socket that enables the socket to work within the Traffic "
"Server vconnection framework. See `vconnections "
"<index.en.html#Vconnections>`__ for more information about the Traffic "
"Server abstraction for doing asynchronous IO."
msgstr ""

#: ../../sdk/io-guide/net-vconnections.en.rst:27
msgid "The netvconnection functions are listed below:"
msgstr ""

#: ../../sdk/io-guide/net-vconnections.en.rst:29
msgid "[dox 'TSNetAccept'] in [dox \"TSNetAccept\" :src\\_file]"
msgstr ""

#: ../../sdk/io-guide/net-vconnections.en.rst:30
msgid "[dox %TSNetConnect%] in [dox :src\\_file]"
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:22
msgid "The Vconnection Implementor's View"
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:24
msgid ""
"A VConnection implementor writes only transformations. All other "
"VConnections (net VConnections and cache VConnections) are implemented in "
"iocore. As mentioned earlier, a given vconnection can have a maximum of one "
"read operation and one write operation being performed on it. The "
"vconnection user gets information about the operation being performed by "
"examining the VIO returned by a call to ``TSVConnRead`` or ``TSVConnWrite``."
" The implementor, in turn, gets a handle on the VIO operation by examining "
"the VIO returned by ``TSVConnReadVIOGet`` or ``TSVConnWriteVIOGet`` (recall "
"that every vconnection created through the Traffic Server API has an "
"associated read VIO and write VIO, even if it only supports reading or "
"writing)."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:36
msgid ""
"For example, the null transform plugin's transformation examines the input "
"VIO by calling:"
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:44
msgid "where ``contp`` is the transformation."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:46
msgid ""
"A vconnection is a continuation. This means it has a handler function that "
"is run when an event is sent to it, or more accurately, when an event that "
"was sent to it is received. It is the handler function's job to examine the "
"event, the current state of its read VIO and write VIO, and any other "
"internal state the vconnection might have and potentially make some progress"
" on the IO operations."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:53
msgid ""
"It is common for the handler function for all vconnections to look similar. "
"Their basic form looks something like the code fragment below:"
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:71
msgid ""
"This code fragment basically shows that many vconnections simply want to "
"destroy themselves when they are closed. However, the situation might also "
"require the vconnection to do some cleanup processing - which is why "
"``TSVConnClose`` does not simply just destroy the vconnection."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:76
msgid ""
"Vconnections are state machines that are animated by the events they "
"receive. An event is sent to the vconnection whenever an ``TSVConnRead``, "
"``TSVConnWrite``, ``TSVConnClose``, ``TSVConnShutdown``, or "
"``TSVIOReenable`` call is performed. ``TSVIOReenable`` indirectly references"
" the vconnection through a back-pointer in the VIO structure to the "
"vconnection. The vconnection itself only knows which call was performed by "
"examining its state and the state of its VIOs. For example, when "
"``TSVConnClose`` is called, the vconnection is sent an immediate event "
"(``TS_EVENT_IMMEDIATE``). For every event the vconnection receives, it needs"
" to check its closed flag to see if it has been closed. Similarly, when "
"``TSVIOReenable`` is called, the vconnection is sent an immediate event. For"
" every event the vconnection receives, it must check its VIOs to see if the "
"buffers have been modified to a state in which it can continue processing "
"one of its operations."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:92
msgid ""
"Finally, a vconnection is likely the user of other vconnections. It also "
"receives events as the user of these other vconnections. When it receives "
"such an event, like ``TS_EVENT_VCONN_WRITE_READY``, it might just enable "
"another vconnection that's writing into the buffer used by the vconnection "
"reading from it. The above description is merely intended to give the "
"overall idea for what a vconnection needs to do."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:100
msgid "Transformation VConnection"
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:102
msgid ""
"A `transformation <HTTPTransformationPlugins.html#Transformations>`__ is a "
"specific type of vconnection. It supports a subset of the vconnection "
"functionality that enables one or more transformations to be chained "
"together. A transformation sits as a bottleneck between an input data source"
" and an output data sink, which enables it to view and modify all the data "
"passing through it. Alternatively, some transformations simply scan the data"
" and pass it on. A common transformation is one that compresses data in some"
" manner."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:111
msgid ""
"A transformation can modify either the data stream being sent *to* an HTTP "
"client (e.g. the document) or the data stream being sent *from* an HTTP "
"client (e.g. post data). To do this, the transformation should hook on to "
"one of the following hooks:"
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:120
msgid ""
"Note that because a transformation is intimately associated with a given "
"transaction, it is only possible to add the hook to the transaction hooks - "
"not to the global or session hooks. Transformations reside in a chain, so "
"their ordering is quite easily determined: transformations that add "
"themselves to the chain are simply appended to it."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:126
msgid ""
"Data is passed in to the transformation by initiating a vconnection write "
"operation on the transformation. As a consequence of this design, a "
"transformation must support the vconnection write operation. In other words,"
" your transformation must expect an upstream vconnection to write data to "
"it. The transformation has to read the data, consume it, and tell the "
"upstream vconnection it is finished by sending it an "
"``TS_EVENT_WRITE_COMPLETE`` event. Transformations cannot send the "
"``TS_EVENT_VCONN_WRITE_COMPLETE`` event to the upstream vconnection unless "
"they are finished consuming all incoming data. If "
"``TS_EVENT_VCONN_WRITE_COMPLETE`` is sent prematurely, then certain internal"
" Traffic Server data structures will not be deallocated, thereby causing a "
"memory leak."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:139
msgid "Here's how to make sure that all incoming data is consumed:"
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:141
msgid ""
"After reading or copying data, make sure that you consume the data and "
"increase the value of ndone for the input VIO, as in the following example "
"taken from ``null-transform.c``:"
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:155
msgid ""
"Before sending ``TS_EVENT_VCONN_WRITE_COMPLETE``, your transformation should"
" check the number of bytes remaining in the upstream vconnection's write VIO"
" (input VIO) using the function ``TSVIONTodoGet`` (``input_vio``). This "
"value should go to zero when all of the upstream data is consumed "
"(``TSVIONTodoGet = nbytes - ndone``). Do not send "
"``TS_EVENT_VCONN_WRITE_COMPLETE`` events if ``TSVIONTodoGet`` is greater "
"than zero."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:163
msgid ""
"The transformation passes data out of itself by using the output vconnection"
" retrieved by ``TSTransformOutputVConnGet``. Immediately before Traffic "
"Server initiates the write operation (which inputs data into the "
"transformation), it sets the output vconnection either to the next "
"transformation in the chain of transformations or to a special terminating "
"transformation (if it's the last transformation in the chain). Since the "
"transformation is handed ownership of the output vconnection, it must close "
"it at some point in order for it to be deallocated."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:172
msgid ""
"All of the transformations in a transformation chain share the transaction's"
" mutex. This small restriction (enforced by ``TSTransformCreate``) removes "
"many of the locking complications of implementing general vconnections. For "
"example, a transformation does not have to grab its write VIO mutex before "
"accessing its write VIO because it knows it already holds the mutex."
msgstr ""

#: ../../sdk/io-guide/transformations.en.rst:179
msgid ""
"The transformation functions are: \\* ```TSTransformCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a54c4902bb537d3d40763bd947ed753b9>`__"
" \\* ```TSTransformOutputVConnGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ac6832718a2d9f2658409ad231811e1e3>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:21
msgid ""
"A **VIO**, or **virtual IO**, is a description of an IO operation that's "
"currently in progress. The VIO data structure is used by vconnection users "
"to determine how much progress has been made on a particular IO operation "
"and to re-enable an IO operation when it stalls due to buffer space issues. "
"VIOs are used by vconnection implementors to determine the buffer for an IO "
"operation, how much work to do on the IO operation, and which continuation "
"to call back when progress on the IO operation is made."
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:30
msgid ""
"The ``TSVIO`` data structure itself is opaque, but it could be defined as "
"follows:"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:45
msgid ""
"The VIO functions below access and modify various parts of the data "
"structure."
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:48
msgid ""
"```TSVIOBufferGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#a55df75b6ba6e9152292a01e0b4e21963>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:49
msgid ""
"```TSVIOVConnGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#a32b9eaaadf2145f98ceb4d64b7c06c2f>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:50
msgid ""
"```TSVIOContGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#a071f12b307885c02aceebc41601bbdcf>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:51
msgid ""
"```TSVIOMutexGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#ab4e8c755cf230918a14a4411af8b3e63>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:52
msgid ""
"```TSVIONBytesGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#af6fc57adc7308864b343b6b7fd30c5ff>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:53
msgid ""
"```TSVIONBytesSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a27594723f14891ac43da3e1368328d0e>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:54
msgid ""
"```TSVIONDoneGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ad71156f68a119c00502ff1fd598824ab>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:55
msgid ""
"```TSVIONDoneSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#af4590966899039571d874e0c090042ad>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:56
msgid ""
"```TSVIONTodoGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#a1dd145ddd60822a5f892becf7b8e8f84>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:57
msgid ""
"```TSVIOReaderGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#a471ee1fde01fbeabce6c39944dfe9da6>`__"
msgstr ""

#: ../../sdk/io-guide/vios.en.rst:58
msgid ""
"```TSVIOReenable`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a792ef9d6962193badad2877a81d8bcff>`__"
msgstr ""

#: ../../sdk/misc-interface-guide.en.rst:2
msgid "Miscellaneous Interface Guide"
msgstr ""

#: ../../sdk/misc-interface-guide.en.rst:21
msgid ""
"Most of the functions in the Traffic Server API provide an interface to "
"specific code modules within Traffic Server. The miscellaneous functions "
"described in this chapter provide some useful general capabilities. They are"
" categorized as follows:"
msgstr ""

#: ../../sdk/misc-interface-guide.en.rst:34
msgid ""
"The C library already provides functions such as ``printf``, ``malloc``, and"
" ``fopen`` to perform these tasks. The Traffic Server API versions, however,"
" overcome various C library limitations (such as portability to all Traffic "
"Server-support platforms)."
msgstr ""

#: ../../sdk/misc-interface-guide.en.rst:40
msgid "Debugging Functions"
msgstr ""

#: ../../sdk/misc-interface-guide.en.rst:42
msgid ""
"```TSDebug`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#afccd91047cc46eb35478a751ec65c78d>`__"
" prints out a formatted statement if you are running Traffic Server in debug"
" mode."
msgstr ""

#: ../../sdk/misc-interface-guide.en.rst:46
msgid ""
"```TSIsDebugTagSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a2d3ceac855c1cde83eff5484bc952288>`__"
" checks to see if a debug tag is set. If the debug tag is set, then Traffic "
"Server prints out all debug statements associated with the tag."
msgstr ""

#: ../../sdk/misc-interface-guide.en.rst:51
msgid ""
"```TSError`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a19ff77fecfc3e331b03da6e358907787>`__"
" prints error messages to Traffic Server's error log"
msgstr ""

#: ../../sdk/misc-interface-guide.en.rst:54
msgid ""
"```TSAssert`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ad94eb4fb1f08082ea1634f169cc49c68>`__"
" enables the use of assertion in a plugin."
msgstr ""

#: ../../sdk/misc-interface-guide.en.rst:57
msgid ""
"```TSReleaseAssert`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a5e751769785de91c52bd503bcbc28b0a>`__"
" enables the use of assertion in a plugin."
msgstr ""

#: ../../sdk/misc-interface-guide/memory-allocation.en.rst:2
msgid "Memory Allocation"
msgstr ""

#: ../../sdk/misc-interface-guide/memory-allocation.en.rst:21
msgid ""
"Traffic Server provides five routines for allocating and freeing memory. "
"These routines correspond to similar routines in the C library. For example,"
" ``TSrealloc`` behaves like the C library routine ``realloc``."
msgstr ""

#: ../../sdk/misc-interface-guide/memory-allocation.en.rst:25
msgid ""
"There are two main reasons for using the routines provided by Traffic "
"Server. The first is portability: the Traffic Server API routines behave the"
" same on all of Traffic Server's supported platforms. For example, "
"``realloc`` does not accept an argument of ``NULL`` on some platforms. The "
"second reason is that the Traffic Server routines actually track the memory "
"allocations by file and line number. This tracking is very efficient, always"
" turned on, and quite useful when tracking down memory leaks."
msgstr ""

#: ../../sdk/misc-interface-guide/memory-allocation.en.rst:34
msgid "The memory allocation functions are:"
msgstr ""

#: ../../sdk/misc-interface-guide/memory-allocation.en.rst:36
msgid ""
"```TSfree`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#afe7f18beddf31a80436a03a5ab7e759f>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/memory-allocation.en.rst:38
msgid ""
"```TSmalloc`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#af030092823148cbbc5525c4fcde9bb37>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/memory-allocation.en.rst:40
msgid ""
"```TSrealloc`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a3abaf3d50d82377dccd1c16bc7b631ab>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/memory-allocation.en.rst:42
msgid ""
"```TSstrdup`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a92c01584655c52e46a58986435e17c86>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/memory-allocation.en.rst:44
msgid ""
"```TSstrndup`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a11072c11fa6d8470ace2963615229146>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/thread-functions.en.rst:2
msgid "Thread Functions"
msgstr ""

#: ../../sdk/misc-interface-guide/thread-functions.en.rst:21
msgid ""
"The Traffic Server API thread functions enable you to create, destroy, and "
"identify threads within Traffic Server. Multithreading enables a single "
"program to have more than one stream of execution and to process more than "
"one transaction at a time. Threads serialize their access to shared "
"resources and data using the ``TSMutex`` type, as described in `Mutexes "
"<../mutex-guide/#Mutexes>`__."
msgstr ""

#: ../../sdk/misc-interface-guide/thread-functions.en.rst:28
msgid "The thread functions are listed below:"
msgstr ""

#: ../../sdk/misc-interface-guide/thread-functions.en.rst:30
msgid ""
"```TSThreadCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#ad087d67be30b68b6d608a5094fceed2a>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/thread-functions.en.rst:31
msgid ""
"```TSThreadDestroy`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#a600e8ad830081bdcf6caabc07b54c9e4>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/thread-functions.en.rst:32
msgid ""
"```TSThreadInit`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#a11088d9aaba362827841687864e55242>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/thread-functions.en.rst:33
msgid ""
"```TSThreadSelf`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#a5cc33c5182755e3d62b4aa55277425d9>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/tsfopen-family.en.rst:2
msgid "The TSfopen Family"
msgstr ""

#: ../../sdk/misc-interface-guide/tsfopen-family.en.rst:21
msgid ""
"The ``fopen`` family of functions in C is normally used for reading "
"configuration files, since ``fgets`` is an easy way to parse files on a "
"line-by-line basis. The ``TSfopen`` family of functions aims at solving the "
"same problem of buffered IO and line at a time IO in a platform-independent "
"manner. The ``fopen`` family of C library functions can only open a file if "
"a file descriptor less than 256 is available. Since Traffic Server often has"
" more than 2000 file descriptors open at once, however, the likelihood of an"
" available file descriptor less than 256 very small. To solve this problem, "
"the ``TSfopen`` family can open files with descriptors greater than 256."
msgstr ""

#: ../../sdk/misc-interface-guide/tsfopen-family.en.rst:32
msgid ""
"The ``TSfopen`` family of routines is not intended for high speed IO or "
"flexibility - they are blocking APIs (not asynchronous). For performance "
"reasons, you should not directly use these APIs on a Traffic Server thread "
"(when being called back on an HTTP hook); it is better to use a separate "
"thread for doing the blocking IO. The ``TSfopen`` family is intended for "
"reading and writing configuration information when corresponding usage of "
"the ``fopen`` family of functions is inappropriate due to file descriptor "
"and portability limitations. The ``TSfopen`` family of functions consists of"
" the following:"
msgstr ""

#: ../../sdk/misc-interface-guide/tsfopen-family.en.rst:42
msgid ""
"```TSfclose`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a2efebe7583752668e6136de0b47bee4f>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/tsfopen-family.en.rst:44
msgid ""
"```TSfflush`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a3cb0cb348ed189a98577f84e0629ca9a>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/tsfopen-family.en.rst:46
msgid ""
"```TSfgets`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a6dcc724a432a287836352b31984e0de8>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/tsfopen-family.en.rst:48
msgid ""
"```TSfopen`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a53b0430d5b0c042bdb3d06689cf244f3>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/tsfopen-family.en.rst:50
msgid ""
"```TSfread`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a29f83c50b52e4fcabfe2b829de5742e2>`__"
msgstr ""

#: ../../sdk/misc-interface-guide/tsfopen-family.en.rst:52
msgid ""
"```TSfwrite`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a596a5562db5180ea8818f7bb87336a15>`__"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:2
msgid "Mutex Guide"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:21
msgid ""
"Mutexes are used to lock shared data. This chapter explains how to use the "
"mutex interface."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:28
msgid "Mutexes"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:30
msgid ""
"A **mutex** is the basic synchronization method used within Traffic Server "
"to protect data from simultaneous access by multiple threads. A mutex acts "
"as a lock that protects data in one program thread from being accessed by "
"another thread."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:35
msgid ""
"The Traffic Server API provides two functions that attempt to access and "
"lock the data: ``InkMutexLockTry`` and ``TSMutexLock``. **``TSMutexLock``** "
"is a blocking call - if you use it, you can slow Traffic Server performance "
"because transaction processing pauses until the mutex is unlocked. It should"
" be used only on threads created by the plugin ``TSContThreadCreate``. Never"
" use it on a continuation handler called back by the Cache, Net, or Event "
"Processor. Even if the critical section is very small, do not use it. If you"
" need to update a flag, then set a variable and/or use atomic operations. If"
" ``TSMutexLock`` is used in any case other than the one recommended above, "
"then the result will be a serious performance impact."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:47
msgid ""
"**``TSMutexLockTry``**, on the other hand, attempts to lock the mutex only "
"if it is unlocked (i.e., not being used by another thread). It should be "
"used in all cases other than the above mentioned ``TSMutexLock`` case. If "
"the ``TSMutexLockTry`` attempt fails, then you can schedule a future attempt"
" (which must be at least 10 milliseconds later)."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:54
msgid ""
"In general, you should use ``TSMutexLockTry`` instead of ``TSMutexLock``."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:57
msgid ""
"``InkMutexLockTry`` is required if you are tying to lock Traffic Server "
"internal or system resources (such as the network, cache, event processor, "
"HTTP state machines, and IO buffers)."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:61
msgid ""
"``InkMutexLockTry`` is required if you are making any blocking calls (such "
"as network, cache, or file IO calls)."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:64
msgid ""
"``TSMutexLock`` might *not* be necessary if you are not making blocking "
"calls and if you are only accessing local resources."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:67
msgid ""
"The Traffic Server API uses the ``TSMutex`` type for a mutex. There are two "
"typical uses of mutex. One use is for locking global data or data shared by "
"various continuations. The other typical usage is for locking data "
"associated with a continuation (i.e., data that might be accessed by other "
"continuations)."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:74
msgid "Locking Global Data"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:76
msgid ""
"The ``blacklist-1.c`` sample plugin implements a mutex that locks global "
"data. The blacklist plugin reads its blacklisted sites from a configuration "
"file; file read operations are protected by a mutex created in "
"``TSPluginInit``. The ``blacklist-1.c`` code uses ``TSMutexLockTry`` instead"
" of ``InkMutexLock``. For more detailed information, see the "
"```blacklist-1.c`` <../sample-source-code#Sample_blacklist-1.c>`__ code; "
"start by looking at the ```TSPluginInit`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a9a0b0ac9cbce9d6644f66bbe93098313>`__"
" function."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:87
msgid "General guidelines for locking shared data are as follows:"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:89
msgid ""
"Create a mutex for the shared data with ```TSMutexCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aa4300d8888c6962a44c9e827d633e433>`__."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:92
msgid ""
"Whenever you need to read or modify this data, first lock it by calling "
"```TSMutexLockTry`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ac9c08451aa529851b9474e3c035f44bb>`__;"
" then read or modify the data."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:97
msgid ""
"When you are done with the data, unlock it with ```TSMutexUnlock`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#afbb474c217fd5b927f1f8487c45646dd>`__."
" If you are unlocking data accessed during the processing of an HTTP "
"transaction, then you must unlock it before calling ```TSHttpTxnReenable`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ac367347e02709ac809994dfb21d3288a>`__."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:104
msgid "Protecting a Continuation's Data"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:106
msgid ""
"You must create a mutex to protect a continuation's data if it might be "
"accessed by other continuations or processes. Here's how:"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:119
msgid "continuation's mutex. | For example:"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:128
msgid ""
"If any other functions want to access ``contp``'s data, then it is up to "
"them to get ``contp``'s mutex (using, for example, ``TSContMutexGet``) to "
"lock it. For usage, ssee the sample Protocol plugin."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:133
msgid "How to Associate a Continuation With Every HTTP Transaction"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:135
msgid ""
"There could be several reasons why you'd want to create a continuation for "
"each HTTP transaction that calls back your plugin."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:138
msgid "Some potential scenarios are listed below."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:140
msgid ""
"You want to register hooks locally with the new continuation instead of "
"registering them globally to the continuation plugin."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:143
msgid ""
"You want to store data specific to each HTTP transaction that you might need"
" to reuse across various hooks."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:146
msgid ""
"You're using APIs (like ``TSHostLookup``) that will call back the "
"continuation with a certain event."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:150
msgid "How to Add the New Continuation"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:152
msgid ""
"A typical way of adding the new continuation is by registering the plugin "
"continuation to be called back by HTTP transactions globally when they reach"
" ``TS_HTTP_TXN_START_HOOK``. Refer to the example below, which uses a "
"transaction-specific continuation called ``txn_contp``."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:173
msgid ""
"In the plugin continuation handler, create the new continuation "
"``txn_contp`` and then register it to be called back at "
"``TS_HTTP_TXN_CLOSE_HOOK``:"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:209
msgid ""
"Remember that the ``txn_contp`` handler must destory itself when the HTTP "
"transaction is closed. If you forget to do this, then your plugin will have "
"a memory leak."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:238
msgid "How to Store Data Specific to Each HTTP Transaction"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:240
msgid ""
"For the example above, store the data in the ``txn_contp`` data structure - "
"this means that you'll create your own data structure. Now suppose you want "
"to store the state of the HTTP transaction:"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:251
msgid ""
"You need to allocate the memory and initialize this structure for each HTTP "
"``txnp``. You can do that in the plugin continuation handler when it is "
"called back with ``TS_EVENT_HTTP_TXN_START``"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:295
msgid "For accessing this data from anywhere, use TSContDataGet:"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:309
msgid "Remember to free this memory before destroying the continuation:"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:343
msgid "Using Locks"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:345
msgid ""
"You do not need to use locks when a continuation has registered itself to be"
" called back by HTTP hooks and it only uses the HTTP APIs. In the example "
"above, the continuation ``txn_contp`` has registered itself to be called "
"back at HTTP hooks and it only uses the HTTP APIs. In this case only, it's "
"safe to access data shared between ``txnp`` and ``txn_contp`` without "
"grabbing a lock. In the example above, ``txn_contp`` is created with a "
"``NULL`` mutex. This works because the HTTP transaction ``txnp`` is the only"
" one that will call back ``txn_contp``, and you are guaranteed that "
"``txn_contp`` will be called back only one hook at a time. After processing "
"is finished, ``txn_contp`` will reenable ``txnp``."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:357
msgid ""
"In all other cases, you should create a mutex with the continuation. In "
"general, a lock is needed when you're using iocore APIs or any other API "
"where ``txn_contp`` is scheduled to be called back by a processor (such as "
"the cache processor, the DNS processor, etc.). This ensures that "
"``txn_contp`` is called back sequentially and not simultaneously. In other "
"words, you need to ensure that ``txn_contp`` will not be called back by both"
" ``txnp`` and the cache processor at the same time, since this will result "
"in a situation wherein you're executing two pieces of code in conflict."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:368
msgid "Special Case: Continuations Created for HTTP Transactions"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:370
msgid ""
"If your plugin creates a new continuation for each HTTP transaction, then "
"you probably don't need to create a new mutex for it because each HTTP "
"transaction (``TSHttpTxn`` object) already has its own mutex."
msgstr ""

#: ../../sdk/mutex-guide.en.rst:374
msgid ""
"In the example below, it's not necessary to specify a mutex for the "
"continuation created in ``txn_handler``:"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:406
msgid "The mutex functions are listed below:"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:408
msgid ""
"```TSMutexCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aa4300d8888c6962a44c9e827d633e433>`__"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:409
msgid ""
"```TSMutexLock`` "
"<http://people.apache.org/~amc/ats/doc/html/InkIOCoreAPI_8cc.html#a306f9923bc9d3c0f417c185919531934>`__"
msgstr ""

#: ../../sdk/mutex-guide.en.rst:410
msgid ""
"```TSMutexLockTry`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#ac9c08451aa529851b9474e3c035f44bb>`__"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:4
msgid "New Protocol Plugins"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:26
msgid ""
"The new protocol APIs enable you to extend Traffic Server to be a web proxy "
"for any protocol. This chapter describes new protocol APIs and the plugins "
"that support new protocols. It also provides a detailed review of code for a"
" sample Protocol plugin that supports a very simple artificial HTTP-like "
"protocol."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:33
msgid "About the Sample Protocol"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:35
msgid ""
"The sample protocol enables a client to ask a server for a file. Clients "
"send requests to a specific Traffic Server port (specified in "
":file:`plugin.config`); each request has the following structure::"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:41
msgid ""
"Using the Protocol plugin, Traffic Server can accept these requests, parse "
"them, and act as a proxy cache (i.e., request the file from the origin "
"server on the client's behalf and store copies of response messages in "
"cache). The Protocol plugin is a state machine that flows through the states"
" illustrated in the `Sample Protocol State Diagram "
"<#SampleProtocolStDiag>`_. This figure illustrates the steps that Traffic "
"Server and the Protocol plugin go through in order to support the sample "
"protocol."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:50
msgid "In more specific terms, Traffic Server and the Protocol plugin must:"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:52
msgid ""
"Listen for and accept client connections (on the accept port specified in "
":file:`plugin.config`)"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:55
msgid "Read incoming client requests"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:57
msgid "Look up the requested content in the Traffic Server cache"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:59
msgid ""
"Serve content from cache if the request is a cache hit (this simple example "
"does not do freshness checking)"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:62
msgid ""
"Open a connection to the origin server if the request is a cache miss (on "
"the server port specified in :file:`plugin.config`)"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:65
msgid "Forward the request to the origin server"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:67
msgid "Receive the origin server response"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:69
msgid "Cache the response and send it on to the client"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:71
msgid "**Sample Protocol State Diagram** {#SampleProtocolStDiag}"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:76
msgid "Sample Protocol State Diagram"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:79
msgid "Protocol Plugin Structure"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:81
msgid ""
"To see how the Protocol plugin works, you need to understand some broader "
"concepts. This section assumes you're familiar with the concepts of "
":term:`continuation`, Traffic Server's **asynchronous event model**, and "
"basic Traffic Server **plugin structure**. If you are not familiar with "
"these concepts, then reference `Getting Started <../getting-"
"started#GettingStarted>`_ and `How to Create Traffic Server Plugins <../how-"
"to-create-trafficserver-plugins>`_"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:90
msgid "Continuations in the Protocol Plugin"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:92
msgid ""
"The Protocol plugin creates a static continuation that is an **\"accept\" "
"state machine** - that is, a state machine whose job is to accept client "
"connections on the appropriate port. When Traffic Server accepts a net "
"connection from a client on that port, the accept state machine is "
"activated. It then creates a new continuation: a transaction state machine. "
"The accept state machine creates one transaction state machine for each "
"transaction (where a :term:`transaction` consists of a client request and "
"Traffic Server's response). Each transaction state machine lives until the "
"transaction completes; then it is destroyed. If the client's request for "
"content is a cache miss, then a transaction state machine might need to open"
" a connection to the origin server. This is illustrated in the `Protocol "
"Plugin Overview <#ProtocolPluginOverview>`__ diagram below."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:106
msgid "**Protocol Plugin Overview**"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:111
msgid "Protocol Plugin Overview"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:113
msgid ""
"The first steps for writing the Protocol plugin are now clear: in "
"``TSPluginInit``, you must create a continuation that listens for net "
"connections on the client port specified in :file:`plugin.config` (this "
"continuation is the accept state machine)."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:118
msgid ""
"Below is a summary of the continuations implemented for the Protocol plugin:"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:121
msgid ""
"An **accept state machine** that listens for client connections, and then "
"creates transaction state machines whenever Traffic Server accepts a new "
"client connection. The accept state machine lives as long as Traffic Server "
"is running."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:126
msgid ""
"**Transaction state machines** that read client requests, process them, and "
"are then destroyed when the transaction is finished."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:130
msgid "Event Flow"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:132
msgid ""
"Implementing the rest of the Protocol plugin requires that you understand "
"the flow of events during the course of a transaction. Unlike HTTP "
"transaction plugins, this plugin must read data from network connections and"
" then read/write data to the Traffic Server cache. This means that its "
"continuations do not receive HTTP state machine events; they receive events "
"from Traffic Server's processor subsystems. For example: the accept state "
"machine is activated by an ``TS_EVENT_NET_ACCEPT`` event from Traffic "
"Server's Net Processor; the handler function for the accept state machine "
"must therefore be able to handle that event."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:143
msgid ""
"The transaction state machines are activated when the client connection "
"receives incoming request data. The **Net Processor** notifies the "
"transaction state machine of incoming data. The transaction state machine "
"reads the data; when finished, it initiates a cache lookup of the requested "
"file. When the cache lookup completes, the transaction state machine is "
"activated by the Traffic Server **Cache Processor**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:150
msgid ""
"If the transaction state machine needs to open a connection to the origin "
"server to fetch content (in the case of a cache miss), then the transaction "
"state machine initiates a DNS lookup of the server name. The transaction "
"state machine is activated by a DNS lookup event from the Traffic Server "
"**Host Database Processor**. If the transaction must connect to the origin "
"server, then the transaction state machine initiates a net connection and "
"waits for an event from the Net Processor."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:159
msgid "**Protocol Plugin Flow of Events**"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:164
msgid "Protocol Plugin Flow of Events"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:166
msgid ""
"The flow of events is illustrated in the `Protocol Plugin Flow of Events "
"<#ProtocolPluginFlow>`_ diagram above. The thin straight lines show Net "
"Processor event flow, the thin dashed lines represent Host Database event "
"flow, and the thick dashed lines show Cache event flow."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:171
msgid ""
"Notice that this flow of events is independent of the Protocol plugin's "
"design (i.e., whether you build **accept** or **transaction** state "
"machines). Any plugin that supports network connections uses the net "
"vconnection interfaces (``TSNetAccept``, ``TSNetConnect``) and thus receives"
" events from the Net Processor. Any plugin that performs cache lookups or "
"cache writes uses ``TSCacheRead``, ``TSCacheWrite``, ``TSVConnRead``, and "
"``TSVConnWrite`` and thus receives events from the Cache Processor and "
"Traffic Server event system. Similarly, any plugin that does DNS lookups "
"receives events from the Host Database Processor."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:182
msgid "One Way to Implement a Transaction State Machine"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:184
msgid ""
"**Transaction state machines** (**TSMs**) in the Protocol plugin must do the"
" following:"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:187
msgid "Keep track of the state of the transaction"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:189
msgid ""
"Handle events received (based on the state of the transaction and the event "
"received)"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:192
msgid "Update the state of the transaction as it changes"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:194
msgid ""
"Below is one way you can implement TSMs. Details about how the Protocol "
"plugin does this are provided in the next section."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:197
msgid ""
"Create a data structure for transactions that contains all of the state data"
" you need to keep track of. In the Protocol plugin this is a struct, "
"``Txn_SM``."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:201
msgid ""
"When you create the TSM's continuation, initialize data of type ``Txn_SM``. "
"Initialize the data to the initial state of a transaction (in this case, a "
"net connection has just been accepted). Associate this data to the TSM "
"continuation using ``TSContDataSet``."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:206
msgid ""
"Write state handler functions that handle the expected events for each "
"state."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:209
msgid ""
"Write the handler for the TSM. Its job is to receive events, examine the "
"current state, and execute the appropriate state handler function. In the "
"Protocol plugin, the handler is ``main_handler``. ``main_handler`` calls the"
" state handler functions to handle each state."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:215
msgid ""
"The steps below describe the flow of execution illustrated in `\"How "
"Transaction State Machines are Implemented in the Protocol Plugin\" "
"<#ImplementTransStMachine>`__."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:219
msgid ""
"The handler for the TSM, (called **``main_handler``** in the Protocol "
"plugin) receives events from the TSM."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:222
msgid ""
"**``main_handler``** examines the state of the transaction-in particular, it"
" examines the current handler."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:225
msgid ""
"**``main_handler``** calls the **``current_handler``** (which is one of the "
"state handler functions), and then passes the current event to "
"**``current_handler``**. In `the image below <#ImplementTransStMachine>`__ "
"below, the current handler is called **``state2_handler``**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:231
msgid ""
"The **``current_handler``** handles the event and updates the data. In `the "
"image below <#ImplementTransStMachine>`__ below, the state is changed from "
"**``state2``** to **``state3``** (and the current handler is changed from "
"**``state2_handler``** to **``state3_handler``**). The next time "
"**``main_handler``** receives an event, it will be processed by "
"**``state3_handler``**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:238
msgid ""
"**``state2_handler``** arranges the next callback of the TSM. Typically, it "
"gives Traffic Server additional work to do (such as writing a file to cache)"
" so that it can progress to the next state. The TSM (**``main_handler``**) "
"then waits for the next event to arrive from Traffic Server."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:244
msgid ""
"**How Transaction State Machines are Implemented in the Protocol Plugin** "
"{#ImplementTransStMachine}"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:250
msgid "How Transaction State Machines are Implemented in the Protocol Plugin"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:253
msgid "Processing a Typical Transaction"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:255
msgid "The code is contained in the following files:"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:257
msgid "``Protocol.c`` and ``Protocol.h``"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:259
msgid "``Accept.c`` and ``Accept.h``"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:261
msgid "``TxnSM.c`` and ``TxnSM.h``"
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:263
msgid ""
"Below is a step-by-step walk-through of the code that processes a typical "
"transaction."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:266
msgid ""
"The ``TSPluginInit`` function is in the ``Protocol.c`` file. It checks the "
"validity of the ``plugin.config`` entries (there must be two: a client "
"accept port and a server port) and runs an initialization routine, ``init``."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:271
msgid ""
"The **``init``** function (in ``Protocol.c``) creates the plugin's log file "
"using **``TSTextLogObjectCreate``**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:274
msgid ""
"The **``init``** function creates the accept state machine using "
"**``AcceptCreate``**. The code for **``AcceptCreate``** is in the "
"``Accept.c`` file."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:278
msgid ""
"The accept state machine, like the transaction state machine, keeps track of"
" its state with a data structure. This data structure, **``Accept``**, is "
"defined in the ``Accept.h`` file. State data in **``AcceptCreate``** is "
"associated with the new accept state machine via **``TSContDataSet``**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:284
msgid ""
"The **``init``** function arranges the callback of the accept state machine "
"when there is a network connection by using **``TSNetAccept``**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:288
msgid ""
"The handler for the accept state machine is **``accept_event``** in the "
"``Accept.c`` file. When Traffic Server's Net Processor sends "
"**``TS_EVENT_NET_ACCEPT``** to the accept state machine, "
"**``accept_event``** creates a transaction state machine (**``txn_sm``**) by"
" calling **``TxnSMCreate``**. Notice that **``accept_event``** creates a "
"mutex for the transaction state machine, since each transaction state "
"machine has its own mutex."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:296
msgid ""
"The **``TxnSMCreate``** function is in the ``TxnSM.c`` file. The first thing"
" it does is initialize the transaction's data, which is of type ``TxnSM`` "
"(as defined in ``TxnSM.h``). Notice that the current handler "
"(**``q_current_handler``**) is set to **``state_start``**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:302
msgid ""
"**``TxnSMCreate``** then creates a transaction state machine using "
"**``TSContCreate``**. The handler for the transaction state machine is "
"**``main_handler``**, which is in the ``TxnSM.c`` file."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:306
msgid ""
"When **``accept_event``** receives **``TS_EVENT_NET_ACCEPT``**, it calls the"
" transaction state machine ( **``TSContCall (txn_sm, 0, NULL);``** ). The "
"event passed to **``main_handler``** is ``0`` (**``TS_EVENT_NONE``**)."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:311
msgid ""
"The first thing **``main_handler``** does is examine the current "
"**``txn_sm``** state by calling **``TSContDataGet``**. The state is "
"**``state_start``**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:315
msgid ""
"**``main_handler``** then invokes the handler for **``state_start``** by "
"using the function pointer **``TxnSMHandler``** (as defined in ``TxnSM.h``)."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:319
msgid ""
"The **``state_start``** handler function (in the ``TxnSM.c`` file) is handed"
" an event (at this stage, the event is **``TS_EVENT_NET_ACCEPT``**) and a "
"client vconnection. **``state_start``** checks to see if this client "
"vconnection is closed; if it is not, then **``state_start``** attempts to "
"read data from the client vconnection into an **``TSIOBuffer``** "
"(**``state_start``** is handling the event it receives)."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:327
msgid ""
"**``state_start``** changes the current handler to "
"**``state_interface_with_client``** (that is, it updates the state of the "
"transaction to the next state)."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:331
msgid ""
"**``state_start``** initiates a read of the client vconnection (arranges for"
" Traffic Server to send **``TS_EVENT_VCONN_READ_READY``** events to the TSM)"
" by calling **``TSVConnRead``**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:336
msgid ""
"**``state_interface_with_client``** is activated by the next event from "
"Traffic Server. It checks for errors and examines the read VIO for the read "
"operation initiated by **``TSVConnRead``**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:340
msgid ""
"If the read VIO is the **``client_read_VIO``** (which we are expecting at "
"this stage in the transaction), then **``state_interface_with_client``** "
"updates the state to **``state_read_request_from_client``** ."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:345
msgid ""
"**``state_read_request_from_client``** handles actual "
"**``TS_EVENT_READ_READY``** events and reads the client request."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:348
msgid "**``state_read_request_from_client``** parses the client request."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:350
msgid ""
"**``state_read_request_from_client``** updates the current state to the next"
" state, **``state_handle_cache_lookup``** ."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:353
msgid ""
"**``state_read_request_from_client``** arranges for Traffic Server to call "
"back the TSM with the next set of events (initiating the cache lookup) by "
"calling **``TSCacheRead``**."
msgstr ""

#: ../../sdk/new-protocol-plugins.en.rst:357
msgid ""
"When the **``TSCacheRead``** sends the TSM either **``TS_EVENT_OPEN_READ``**"
" (a cache hit) or **``TS_EVENT_OPEN_READ_FAILED``** (a cache miss), "
"**``main_handler``** calls **``state_handle_cache_lookup``**."
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:2
#: ../../sdk/plugin-configurations.en.rst:27
msgid "Plugin Configurations"
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:21
msgid "This chapter contains the following section:"
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:29
msgid ""
"The ``TSConfig`` family of functions provides a mechanism for accessing and "
"changing global configuration information within a plugin."
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:32
msgid ""
"The functions discussed in this section do not examine or modify Traffic "
"Server configuration variables. To examine Traffic Server configuration and "
"statistics variables, see `\"Reading Traffic Server Settings and "
"Statistics\" <../plugin-management/reading-trafficserver-settings-and-"
"statistics>`__"
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:37
msgid ""
"The ``TSConfig`` family of functions is designed to provide a fast and "
"efficient mechanism for accessing and changing global configuration "
"information within a plugin. Such a mechanism is simple enough to provide in"
" a single-threaded program, but the translation to a multi-threaded program "
"such as Traffic Server is difficult. A common technique is to have a single "
"mutex protect the global configuration information; however, the problem "
"with this solution is that a single mutex becomes a performance bottleneck "
"very quickly."
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:46
msgid ""
"The ``TSConfig`` family of functions define an interface to storing and "
"retrieving an opaque data pointer. Internally, Traffic Server maintains "
"reference count information about the data pointer so that a call to "
"``TSConfigSet`` will not disturb another thread using the current data "
"pointer. The philosophy is that once a user has a hold of the configuration "
"pointer, it is okay for it to be used even if the configuration changes; all"
" that a user typically wants is a non-changing snapshot of the "
"configuration. You should use ``TSConfigSet`` for all global data updates."
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:56
msgid "Here's how the interface works:"
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:106
msgid "The configuration functions are:"
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:108
msgid ""
"```TSConfigDataGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#aed2a6f9d350935ac890f75fdd80605db>`__"
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:110
msgid ""
"```TSConfigGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a478189d6ad87c6b873d8676cb51508c5>`__"
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:112
msgid ""
"```TSConfigRelease`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a06711d4a0e70f1ff27f9b5ca34bb649c>`__"
msgstr ""

#: ../../sdk/plugin-configurations.en.rst:114
msgid ""
"```TSConfigSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a8bba9468fdca478e68035a9776f6e9ca>`__"
msgstr ""

#: ../../sdk/plugin-management.en.rst:2
msgid "Plugin Management"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:2
msgid "Guide to the Logging API"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:21
msgid ""
"The logging API enables your plugin to log entries in a custom text log file"
" that you create with the call ``TSTextLogObjectCreate``. This log file is "
"part of Traffic Server's logging system; by default, it is stored in the "
"logging directory. Once you have created the log object, you can set log "
"properties."
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:27
msgid "The logging API enables you to:"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:29
msgid ""
"Establish a custom text log for your plugin: see ```TSTextLogObjectCreate`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ae75e85e476efeaa16ded185da7a3081b>`__"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:32
msgid ""
"Set the log header for your custom text log: see "
"```TSTextLogObjectHeaderSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a7c10f89fe8bcb6b733f4a83b5a73b71c>`__"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:35
msgid ""
"Enable or disable rolling your custom text log: see "
"```TSTextLogObjectRollingEnabledSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#aec1e883f0735ee40c8b56d90cf27acd1>`__"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:38
msgid ""
"Set the rolling interval (in seconds) for your custom text log: see "
"```TSTextLogObjectRollingIntervalSecSet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#aac0be2e81694db0363c5321e8a2019ce>`__"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:41
msgid ""
"Set the rolling offset for your custom text log: see "
"```TSTextLogObjectRollingOffsetHrSet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a9d90885b975947c241f74c33550180b4>`__"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:44
msgid ""
"Write text entries to the custom text log: see ```TSTextLogObjectWrite`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a34de01e5603ea639d7ce6c7bf9613254>`__"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:47
msgid ""
"Flush the contents of the custom text log's write buffer to disk: see "
"```TSTextLogObjectFlush`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#ad746b22f992c2adb5f0271e5136a6ca1>`__"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:50
msgid ""
"Destroy custom text logs when you are done with them: see "
"```TSTextLogObjectDestroy`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#af6521931ada7bbc38194e79e60081d54>`__"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:53
msgid ""
"The steps below show how the logging API is used in the ``blacklist-1.c`` "
"sample plugin. For the complete source code, see the `*Sample Source Code* "
"<App_SampleSourceCode.html>`__ appendix."
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:57
msgid "A new log file is defined as a global variable."
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:64
msgid "In ``TSPluginInit``, a new log object is allocated:"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:71
msgid ""
"The new log is named ``blacklist.log``. Each entry written to the log will "
"have a timestamp. The ``NULL`` argument specifies that the new log does not "
"have a log header. The error argument stores the result of the log creation;"
" if the log is created successfully, then an error will be equal to "
"``TS_LOG_ERROR_NO_ERROR``."
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:77
msgid ""
"After creating the log, the plugin makes sure that the log was created "
"successfully:"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:87
msgid ""
"The ``blacklist-1`` plugin matches the host portion of the URL (in each "
"client request) with a list of blacklisted sites (stored in the array "
"``sites[``]):"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:91
msgid ""
"::::c for (i = 0; i < nsites; i++) { if (strncmp (host, sites[i], "
"host\\_length) == 0) { If the host matches one of the blacklisted sites "
"(such as ``sites[i]``), then the plugin writes a blacklist entry to "
"``blacklist.log``:"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:96
msgid ""
"::::c if (log) { TSTextLogObjectWrite(log, \"blacklisting site: %s\", "
"sites[i]); The format of the log entry is as follows:"
msgstr ""

#: ../../sdk/plugin-management/guide-to-the-logging-api.en.rst:99
msgid ""
":::text blacklisting site: sites[i] The log is not flushed or destroyed in "
"the ``blacklist-1`` plugin - it lives for the life of the plugin."
msgstr ""

#: ../../sdk/plugin-management/reading-trafficserver-settings-and-statistics.en.rst:2
msgid "Reading Traffic Server Settings and Statistics"
msgstr ""

#: ../../sdk/plugin-management/reading-trafficserver-settings-and-statistics.en.rst:21
msgid ""
"Your plugin might need to know information about Traffic Server's current "
"configuration and performance. The functions described in this section read "
"this information from the Traffic Server :file:`records.config` file. "
"Configuration settings are stored in ``CONFIG`` variables and statistics are"
" stored in ``PROCESS`` variables."
msgstr ""

#: ../../sdk/plugin-management/reading-trafficserver-settings-and-statistics.en.rst:29
msgid ""
"Not all ``CONFIG`` and ``PROCESS`` variables in :file:`records.config` are "
"relevant to Traffic Server's configuration and statistics. Therefore, "
"retrieve only the :file:`records.config` variables that are documented in "
"the `Traffic Server Administrator's Guide <../../admin/>`__."
msgstr ""

#: ../../sdk/plugin-management/reading-trafficserver-settings-and-statistics.en.rst:34
msgid ""
"To retrieve a variable, you need to know its type (``int``, ``counter``, "
"``float``, or ``string``). Plugins store the :file:`records.config` values "
"as an ``TSMgmtInt``, ``TSMgmtCounter``, ``TSMgmtFloat``, or "
"``TSMgmtString``. You can look up :file:`records.config` variable types in "
"the `Traffic Server Administrator's Guide <../../admin/>`__."
msgstr ""

#: ../../sdk/plugin-management/reading-trafficserver-settings-and-statistics.en.rst:40
msgid ""
"Depending on the result type, you'll use ``TSMgmtIntGet``, "
"``TSMgmtCounterGet``, ``TSMgmtFloatGet``, or ``TSMgmtStringGet`` to obtain "
"the variable value (see the example for ```TSMgmtIntGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a097aaecda41d04b522796ae25eea9a3d>`__."
msgstr ""

#: ../../sdk/plugin-management/reading-trafficserver-settings-and-statistics.en.rst:45
msgid "The ``TSMgmt*Get`` functions are:"
msgstr ""

#: ../../sdk/plugin-management/reading-trafficserver-settings-and-statistics.en.rst:47
msgid ""
"```TSMgmtCounterGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a583e21e614b70256f68658fc6c455ea6>`__"
msgstr ""

#: ../../sdk/plugin-management/reading-trafficserver-settings-and-statistics.en.rst:49
msgid ""
"```TSMgmtFloatGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a2ace94b52c71656304b53824d3fa7080>`__"
msgstr ""

#: ../../sdk/plugin-management/reading-trafficserver-settings-and-statistics.en.rst:51
msgid ""
"```TSMgmtIntGet`` "
"<http://people.apache.org/~amc/ats/doc/html/ts_8h.html#a097aaecda41d04b522796ae25eea9a3d>`__"
msgstr ""

#: ../../sdk/plugin-management/reading-trafficserver-settings-and-statistics.en.rst:53
msgid ""
"```TSMgmtStringGet`` "
"<http://people.apache.org/~amc/ats/doc/html/InkAPI_8cc.html#a14167888ed89d5b30df5bdcdcfdf1c30>`__"
msgstr ""

#: ../../sdk/preface.en.rst:4
msgid "Preface"
msgstr ""

#: ../../sdk/preface.en.rst:29
msgid ""
"The *Traffic Server Software Developer's Kit* is a reference for creating "
"plugins. **Plugins** are programs that add services (such as filtering or "
"content transformation) or entire features (such as new protocol support) to"
" Traffic Server. If you are new to writing Traffic Server plugins, then read"
" the first two chapters, :ref:`sdk-getting-started` and :ref:`how-to-create-"
"to-create-trafficserver-plugins`, and use the remaining chapters as needed. "
":ref:`header-based-plugin-examples` provides details about plugins that work"
" on HTTP headers, while :ref:`http-transformation-plugin` explains how to "
"write a plugin that transforms or scans the body of an HTTP response. If you"
" want to support your own protocol on Traffic Server, then reference :ref"
":`new-protocol-plugins`."
msgstr ""

#: ../../sdk/preface.en.rst:41
msgid "Audience"
msgstr ""

#: ../../sdk/preface.en.rst:43
msgid ""
"This manual is intended for programmers who want to write plugin programs "
"that add services or features to Traffic Server. It assumes a cursory "
"knowledge of the C programming language, Hyper-Text Transfer Protocol "
"(HTTP), and Multipurpose Internet Mail Extensions (MIME)."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:2
msgid "How to Use This Book"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:21
msgid "This book has the following basic components:"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:23
msgid "Introduction and overview"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:25
msgid ""
"Tutorials about writing specific kinds of plugins: HTTP header-based "
"plugins, content transformation plugins, and protocol plugins"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:28
msgid "Guides about specific interfaces"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:30
msgid "Reference material"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:32
msgid ""
"If you're new to writing Traffic Server plugins, then read `Getting Started "
"<../getting-started>`_ and `Creating Traffic Server Plugins <../how-to-"
"create-trafficserver-plugins>`_, and use the remaining chapters as needed. "
"`Header-Based Plugin Examples <../header-based-plugin-examples>`_ provides "
"details about plugins that work on HTTP headers, while `HTTP Transformation "
"Plugins <../http-transformation-plugin>`_ explains how to write a plugin "
"that transforms or scans the body of an HTTP response. `New Protocol Plugins"
" <../new-protocol-plugins>`_ provides essential information if you want to "
"support your own protocol on Traffic Server."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:43
msgid "You can look up information in the following reference sections:"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:45
msgid "`Index <concept-index>`_: lists information by subject"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:46
msgid ""
"`Function Index "
"<http://ci.apache.org/projects/trafficserver/trunk/doxygen/>`_: Doxygen "
"reference"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:49
msgid ""
"`Type Index "
"<http://ci.apache.org/projects/trafficserver/trunk/doxygen/classes.html>`_"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:51
msgid "`Sample Source Code <../sample-source-code>`_"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:52
msgid ""
"`Deprecated Functions "
"<http://ci.apache.org/projects/trafficserver/trunk/doxygen/deprecated.html>`_"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:55
msgid "Below is a section-by-section breakdown of this guide:"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:57
msgid ""
"`Getting Started <../getting-started>`_ How to compile and load plugins. "
"Walks through a simple \"hello world\" example; explains how to initialize "
"and register plugins."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:61
msgid ""
"`How to Create Traffic Server Plugins <../how-to-create-trafficserver-"
"plugins>`_ Basic structures that all plugins use: events, continuations, and"
" how to hook on to Traffic Server processes. Detailed explication of a "
"sample blacklisting plugin."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:67
msgid ""
"`Remap Plugin <../remap-plugin>`_ This chapter demonstrates on a practical "
"example how you can exploit the Traffic Server remap API for your plugins."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:71
msgid ""
"`Header-Based Plugin Examples <../header-based-plugin-examples>`_ Detailed "
"explanation about writing plugins that work on HTTP headers; discusses "
"sample blacklisting and basic authorization plugins."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:76
msgid ""
"`HTTP Transformation Plugins <../http-transformation-plugin>`_ Detailed "
"explanation of the null-transform example; also discusses ``VConnections``, "
"``VIOs``, and IO buffers."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:80
msgid ""
"`New Protocol Plugins <../new-protocol-plugins>`_ Detailed explanation of a "
"sample protocol plugin that supports a synthetic protocol. Discusses "
"``VConnections`` and mutexes, as well as the new ``NetConnection``, DNS "
"lookup, logging, and cache APIs."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:85
msgid ""
"The remaining sections comprise the API function reference and are organized"
" by function type:"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:88
msgid ""
"`Miscellaneous Interface Guide <../misc-interface-guide>`_ Details error-"
"writing and tracing functions, thread functions, and Traffic Server API "
"versions of the ``malloc`` and ``fopen`` families. The Traffic Server API "
"versions overcome various C library limitations."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:94
msgid ""
"`HTTP Hooks and Transactions <../http-hoooks-and-transactions>`_ Functions "
"in this chapter hook your plugin to Traffic Server HTTP processes."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:98
msgid ""
"`HTTP Headers <../http-headers>`_ Contains instructions for implementing "
"performance enhancements for all plugins that manipulate HTTP headers. These"
" functions examine and modify HTTP headers, MIME headers, URLs, and the "
"marshal buffers that contain header information. If you are working with "
"headers, then be sure to read this chapter."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:105
msgid "`Mutex Guide <../mutex-guide>`_"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:107
msgid ""
"`Continuations <../continuations>`_ Continuations provide the basic callback"
" mechanism and data abstractions used in Traffic Server."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:111
msgid "`Plugin Configurations <../plugin-configurations>`_"
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:113
msgid ""
"`Actions Guide <../actions-guide>`_ Describes how to use ``TSActions`` and "
"the ``TSDNSLookup`` API."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:116
msgid ""
"`IO Guide <../io-guide>`_ Describes how to use the Traffic Server IO "
"interfaces: ``TSVConnection``, ``TSVIO``, ``TSIOBuffer``, "
"``TSNetVConnection``, the Cache API."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:121
msgid ""
"`Plugin Management <../plugin-management>`_ These functions enable you to "
"set up a configuration interface for plugins, access installed plugin files,"
" and set up plugin licensing."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:125
msgid ""
"`Adding Statistics <../adding-statistics>`_ These functions add statistics "
"to your plugin."
msgstr ""

#: ../../sdk/preface/how-to-use-this-book.en.rst:128
msgid ""
"`Function Index "
"<http://ci.apache.org/projects/trafficserver/trunk/doxygen/>`_ Doxygen "
"generated Traffic Server API Documentation"
msgstr ""

#: ../../sdk/preface/typographical-conventions.en.rst:2
msgid "Typographical Conventions"
msgstr ""

#: ../../sdk/preface/typographical-conventions.en.rst:21
msgid "This document uses the following typographic conventions:"
msgstr ""

#: ../../sdk/preface/typographical-conventions.en.rst:24
msgid "\\_italics \\_ or *\\* bold*\\ \\*"
msgstr ""

#: ../../sdk/preface/typographical-conventions.en.rst:24
msgid "Used to introduce terms."
msgstr ""

#: ../../sdk/preface/typographical-conventions.en.rst:28
msgid "``monospaced face``"
msgstr ""

#: ../../sdk/preface/typographical-conventions.en.rst:27
msgid ""
"Represents C language statements, commands, file content, and computer "
"output."
msgstr ""

#: ../../sdk/preface/typographical-conventions.en.rst:31
msgid "*``monospaced italic``*"
msgstr ""

#: ../../sdk/preface/typographical-conventions.en.rst:31
msgid "Represents variables for which you should substitute a value."
msgstr ""

#: ../../sdk/preface/typographical-conventions.en.rst:35
msgid "``...`` (ellipsis)"
msgstr ""

#: ../../sdk/preface/typographical-conventions.en.rst:34
msgid "Indicates the omission of irrelevant or unimportant information."
msgstr ""

#: ../../sdk/remap-plugin.en.rst:2
msgid "Remap Plugin"
msgstr ""

#: ../../sdk/remap-plugin.en.rst:27
msgid ""
"The Remap plugin provides a more flexible, dynamic way of specifying remap "
"rules. It is not built on top of the Traffic Server APIs and exists solely "
"for the purpose of URL remapping. The remap plugin is not global --it is "
"configured on a per-remap rule basis, which enables you to customize how "
"URLs are redirected based on individual rules in the ``remap.config`` file."
msgstr ""

#: ../../sdk/remap-plugin.en.rst:34
msgid ""
"The Traffic Server Remap API enables a plugin to dynamically map a client "
"request to a target URL. Each plugin is associated with one or more remap "
"rules in ``remap.config`` (an \"instance\"). If a request URL matches a "
"remap rule's \"fromURL\", then Traffic Server calls the plugin-defined remap"
" function for that request."
msgstr ""

#: ../../sdk/remap-plugin.en.rst:40
msgid ""
"((Editor's note: additional text TBD; text in this chapter is still under "
"development))"
msgstr ""

#: ../../sdk/remap-plugin.en.rst:47
msgid "Remap Header File"
msgstr ""

#: ../../sdk/remap-plugin.en.rst:49
msgid ""
"The ``remap.h`` header file contains the Traffic Server remap API. By "
"default, the header file location is: ``/usr/local/include/ts/remap.h``"
msgstr ""

#: ../../sdk/remap-plugin.en.rst:53
msgid "Required Functions"
msgstr ""

#: ../../sdk/remap-plugin.en.rst:55
msgid "A remap plugin is required to implement the following functions:"
msgstr ""

#: ../../sdk/remap-plugin.en.rst:57
msgid ""
"```TSRemapInit`` "
"<http://people.apache.org/~amc/ats/doc/html/remap_8h.html#af7e9b1eee1c38c6f8dcc67a65ba02c24>`__:"
" the remap initialization function, called once when the plugin is loaded"
msgstr ""

#: ../../sdk/remap-plugin.en.rst:61
msgid ""
"```TSRemapNewInstance`` "
"<http://people.apache.org/~amc/ats/doc/html/remap_8h.html#a963de3eeed2ed7a2da483acf77dc42ca>`__:"
" a new instance is created for each rule associated with the plugin. Called "
"each time the plugin used in a remap rule (this function is what processes "
"the pparam values)"
msgstr ""

#: ../../sdk/remap-plugin.en.rst:66
msgid ""
"```TSRemapDoRemap`` "
"<http://people.apache.org/~amc/ats/doc/html/remap_8h.html#acf73f0355c591e145398211b3c0596fe>`__:"
" the entry point used by Traffic Server to find the new URL to which it "
"remaps; called every time a request comes in"
msgstr ""

#: ../../sdk/remap-plugin.en.rst:71
msgid "Configuration"
msgstr ""

#: ../../sdk/remap-plugin.en.rst:73
msgid ""
"To associate a remap plugin with a remap rule, use the ``@plugin`` "
"parameter. See the Admin Guide section (?TBD?) for details on configuring "
"remap plugins"
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:2
msgid "Example: Query Remap Plugin"
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:21
msgid ""
"The sample remap plugin, ``query_remap.c``, maps client requests to a number"
" of servers based on a hash of the request's URL query parameter. This can "
"be useful for spreading load for a given type of request among backend "
"servers, while still maintaining \"stickiness\" to a single server for "
"similar requests. For example, a search engine may want to send repeated "
"queries for the same keywords to a server that has likely cached the result "
"from a prior query."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:30
msgid "Configuration of query\\_remap"
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:32
msgid ""
"The query remap plugin will allow the query parameter name to be specified, "
"along with the hostnames of the servers to hash across. Sample "
"``remap.config`` rules using ``query_remap`` will look like:"
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:41
msgid ""
"The first ``@pparam`` specifies the query param key for which the value will"
" be hashed. The remaining parameters list the hostnames of the servers. A "
"request for ``http://www.example.com/search?q=apache`` will match the first "
"rule. The plugin will look for the *``q``* parameter and hash the value "
"'``apache``\\ ' to pick from among ``srch_[1-3]_.example.com`` to send the "
"request."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:48
msgid ""
"If the request does not include a *``q``* query parameter and the plugin "
"decides not to modify the request, the default toURL "
"'``http://srch1.example.com/search``\\ ' will be used by TS."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:52
msgid ""
"The parameters are passed to the plugin's ``tsremap_new_instance`` function."
" In ``query_remap``, ``tsremap_new_instance`` creates a plugin-defined "
"``query_remap_info`` struct to store its configuration parameters. The "
"ihandle, an opaque pointer that can be used to pass per-instance data, is "
"set to this struct pointer and will be passed to the ``tsremap_remap`` "
"function when it is triggered for a request."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:87
msgid ""
"Another way remap plugins may want handle more complex configuration is to "
"specify a configuration filename as a ``pparam`` and parse the specified "
"file during instance initialization."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:92
msgid "Performing the Remap"
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:94
msgid ""
"The plugin implements the ``tsremap_remap`` function, which is called when "
"TS has read the client HTTP request headers and matched the request to a "
"remap rule configured for the plugin. The ``TSRemapRequestInfo`` struct "
"contains input and output members for the remap operation."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:99
msgid ""
"``tsremap_remap`` uses the configuration information passed via the "
"``ihandle`` and checks the ``request_query`` for the configured query "
"parameter. If the parameter is found, the plugin sets a ``new_host`` to "
"modify the request host:"
msgstr ""

#: ../../sdk/sample-source-code.en.rst:2
msgid "Sample Source Code"
msgstr ""

#: ../../sdk/sample-source-code.en.rst:21
msgid ""
"This appendix provides several source code examples. In the online formats "
"of this book, function calls are linked to their references in the previous "
"chapters. The following sample plugins are provided:"
msgstr ""

#: ../../sdk/sample-source-code.en.rst:25
msgid "`blacklist-1.c <App_SampleSourceCode.html#Sample_blacklist-1.c>`__"
msgstr ""

#: ../../sdk/sample-source-code.en.rst:28
msgid "blacklist-1.c"
msgstr ""

#: ../../sdk/sample-source-code.en.rst:36
msgid "This plugin illustrates:"
msgstr ""

#: ../../sdk/sample-source-code.en.rst:38
msgid "An HTTP transaction extension"
msgstr ""

#: ../../sdk/sample-source-code.en.rst:40
msgid "How to examine HTTP request headers"
msgstr ""

#: ../../sdk/sample-source-code.en.rst:42
msgid "How to use the logging interface"
msgstr ""

#: ../../sdk/sample-source-code.en.rst:44
msgid "How to use the plugin configuration management interface"
msgstr ""

#: ../../sdk/troubleshooting-tips.en.rst:2
msgid "Troubleshooting Tips"
msgstr ""

#: ../../sdk/troubleshooting-tips.en.rst:21
msgid "This appendix lists the following troubleshooting tips."
msgstr ""

#: ../../sdk/troubleshooting-tips.en.rst:33
msgid "Unable to Compile Plugins"
msgstr ""

#: ../../sdk/troubleshooting-tips.en.rst:35
msgid ""
"The process for compiling a shared library varies with the platform used, so"
" the Traffic Server API includes the :program:`tsxs` script you can use to "
"create shared libraries on all supported Traffic Server platforms."
msgstr ""

#: ../../sdk/troubleshooting-tips.en.rst:42
msgid ""
"Assuming the sample program is stored in the file ``hello-world.c``, you "
"could use the following commands to building a shared library:"
msgstr ""

#: ../../sdk/troubleshooting-tips.en.rst:50
msgid ""
"To install this plugin in your ``plugindir`` use the equivalent of sudo on "
"your platform to execute:"
msgstr ""

#: ../../sdk/troubleshooting-tips/debugging-memory-leaks.en.rst:2
msgid "Debugging Memory Leaks"
msgstr ""

#: ../../sdk/troubleshooting-tips/debugging-memory-leaks.en.rst:21
msgid ""
"Memory leaks in a plugin can be detected using e.g. an MRTG graph related to"
" memory - you can use memory dump information. Enable ``mem dump`` in "
":file:`records.config` as follows:"
msgstr ""

#: ../../sdk/troubleshooting-tips/debugging-memory-leaks.en.rst:30
msgid ""
"This causes Traffic Server to dump memory information to ``traffic.out`` at "
"``<value>`` (intervals are in seconds). A zero value means that it is "
"disabled."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:2
msgid "Using Debug Tags"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:21
msgid ""
"Use the API ``void TSDebug (const char *tag, const char *format_str, ...)`` "
"to add traces in your plugin. In this API:"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:25
msgid ""
"``tag`` is the Traffic Server parameter that enables Traffic Server to print"
" out *``format_str``*"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:28
msgid ""
"``...`` are variables for *``format_str``* in the standard ``printf`` style."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:31
msgid ""
"Run Traffic Server with the ``-Ttag`` option. For example, if the tag is "
"``my-plugin``, then the debug output goes to ``traffic.out.``\\ See below:"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:40
msgid ""
"Set the following variables in :file:`records.config` (in the Traffic Server"
" ``config`` directory):"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:49
msgid "In this case, debug output goes to ``traffic.out``."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:51
msgid "Example:"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:58
msgid ""
"The statement ``\"Starting my-plugin at <time>\"`` appears whenever you run "
"Traffic Server with the ``my-plugin`` tag:"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:67
msgid "Other Useful Internal Debug Tags"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:69
msgid ""
"Embedded in the base Traffic Server code are many debug tags for internal "
"debugging purposes. These can also be used to follow Traffic Server behavior"
" for testing and analysis."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:73
msgid ""
"The debug tag setting (``-T`` and ``proxy.config.diag.debug.tags``) is a "
"anchored regular expression against which the tag for a specific debug "
"message is matched. This means the value \"http\" matches debug emssages "
"with the tag \"http\" but also \"http\\_seq\" and \"http\\_trans\". If you "
"want multiple tags then use a pipe symbol to separate the tags. For example "
"\"http\\_tproxy\\|dns\\|hostdb\" will match any of the message tags "
"\"http\\_tproxy\", \"dns\", \"hostdb\", or \"dns\\_srv\" (but not "
"\"http\\_trans\" nor \"splitdns\")."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:82
msgid "Some of the useful HTTP debug tags are:"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:84
msgid "``http_hdrs`` - traces all incoming and outgoing HTTP headers."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:86
msgid "``http_trans`` - traces actions in an HTTP transaction."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:88
msgid "``http_seq`` - traces the sequence of the HTTP state machine."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:90
msgid "``http_tproxy`` - transparency related HTTP events"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:92
msgid "``dns`` - DNS operations"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:94
msgid "``hostdb`` - Host name lookup"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:96
msgid "``iocore_net`` - Socket and low level IO (very voluminous)"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:98
msgid "``socket`` - socket operations"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:100
msgid "``ssl`` - SSL related events"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:102
msgid ""
"``cache`` - Cache operations (many subtags, examine the output to narrow the"
" tag set)"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:105
msgid "``cache_update`` - Cache updates including writes"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:107
msgid "``cache_read`` - Cache read events."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:109
msgid "``dir_probe`` - Cache searches."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-debug-tags.en.rst:111
msgid "``sdk`` - gives some warning concerning API usage."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-load-plugins.en.rst:2
msgid "Unable to Load Plugins"
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-load-plugins.en.rst:21
msgid "To load plugins, follow the steps below."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-load-plugins.en.rst:28
msgid "Add an entry to the ``plugin.config`` file for your plugin."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-load-plugins.en.rst:30
msgid ""
"Add the path to your plugin shared library to the :file:`records.config` "
"file."
msgstr ""

#: ../../sdk/troubleshooting-tips/unable-to-load-plugins.en.rst:35
msgid ""
"For detailed information about each step above, refer to `A Simple Plugin "
"<../getting-started/a-simple-plugin>`__."
msgstr ""

#: ../../sdk/troubleshooting-tips/using-a-debugger.en.rst:2
msgid "Using a Debugger"
msgstr ""

#: ../../sdk/troubleshooting-tips/using-a-debugger.en.rst:21
msgid ""
"A debugger can set breakpoints in a plugin. Use a Traffic Server debug build"
" and compile the plugin with the ``-g`` option. A debugger can also be used "
"to analyze a core dump. To generate core, set the size limit of the core "
"files in the :file:`records.config` file to -1 as follows:"
msgstr ""

#: ../../sdk/troubleshooting-tips/using-a-debugger.en.rst:31
msgid "This is the equivalent of setting ``ulimit -c unlimited``"
msgstr ""

#: ../../sdk/troubleshooting-tips/using-a-debugger.en.rst:34
msgid "Debugging Tips:"
msgstr ""

#: ../../sdk/troubleshooting-tips/using-a-debugger.en.rst:36
msgid "Use a Traffic Server debug version."
msgstr ""

#: ../../sdk/troubleshooting-tips/using-a-debugger.en.rst:38
msgid "Use assertions in your plugin (``TSAssert``/``TSReleaseAssert``)."
msgstr ""
